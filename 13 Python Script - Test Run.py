print("Lepus GC Analysis")#Enter Genus Name Here
#ATP6
#enter the 3 sequences below
atp6_seq_a= "ATGAACGAAAATCTATTCTCCTCTTTTATTACCCCAACAATAATAGGTTTACCAATCGTAATCCTAATTATTATATTCCCGACCCTTCTATTTCCTGCCCCTACCCGACTAATCAACAACCGACTAGTCTCAGCTCAACAATGATTAGCCCAATTAATTCTAAAACAAATAATAATGATGCACTCCCCTAAAGGACGGACCTGATCCCTCATGCTAATTTCCCTAATTATATTTATTGGCTCAACTAATCTTCTAGGCCTCTTACCTCACTCGTTTACACCAACAACCCAATTATCAATAAATCTAGGGATAGCTATCCCACTATGAGCAGGAGCTGTAATTACAGGCTTCCGATATAAAACTAAAGCGTCACTAGCTCACTTTCTCCCACAAGGAACACCTGTACCCCTTATTCCTATGCTAGTAATTATTGAAACAATTAGCCTGTTCATTCAACCCATGGCCTTAGCTGTACGACTCACAGCCAACATTACAGCAGGCCACTTACTAATGCATCTTATCGGAGGCGCAGCACTCGCCCTAATCTCAATTAGTCCAACAACAGCCCTAATTACTTTTATTATTCTTATTCTCCTAACAATTCTAGAATTTGCTGTAGCCCTAATTCAAGCCTACGTTTTTACCCTTCTTGTAAGCCTATACTTACACGATAATACCTAA"
atp6_seq_b= "ATGAACGAAAATTTATTCTCCTCTTTTACCACCCCAACAATAATAGGCTTACCAATCGTAATCCTAATCATCATGTTTCCAACTCTATTATTCCCTACCCCTACCCGACTAATCAACAACCGACTAGTCTCAGCCCAACAATGATTAGCCCAATTAATTCTAAAACAAATAATAATAATACACTCCCCCAAAGGACGAACTTGGTCCCTTATACTAATCTCCCTAATTATATTCATCAGCTCAACTAATCTTCTAGGCCTCCTGCCCCACTCATTTACACCAACAACCCAGCTATCAATAAATCTAGGGATAGCTATTCCACTATGAGCAGGGGCTGTAATTACAGGCTTCCGTTACAAAACTAAAGCATCACTAGCCCACTTTCTCCCACAAGGTACACCTGTCCCTCTTATCCCCATACTAGTCATTATTGAAACAATTAGCCTATTCATTCAACCTATAGCCCTAGCTGTACGACTCACAGCCAACATTACAGCAGGTCACTTACTCATGCATCTTATTGGAGGTGCAGCACTAGCCCTGACCTCAATCAGTCCAACAACAGCCCTAATTACTTTTATTATCCTTATTCTCTTGACTATCCTGGAATTTGCTGTAGCCCTAATTCAAGCCTACGTTTTCACCCTTCTTGTAAGCCTTTATCTACATGATAACACCTAA"
atp6_seq_c= "ATGAACGAAAATCTATTCTCCTCTTTTATTACCCCAACAATAATAGGCTTACCAATCGTAATCCTAATCATCATATTTCCAACCCTACTATTTCCTATCCCTACCCGACTAATCAATAACCGGCTAGTCTCAGCTCAACAATGATTGGCCCAATTGATTCTAAAACAAATAATAATAATGCACTCCCCCAAAGGACGAACCTGGGCTCTCATACTGATCTCCCTAATTATATTTATTGGCTCAACTAACCTACTAGGCCTCTTACCTCATTCATTTACACCAACAACCCAATTATCAATAAACCTAGGGATAGCTATCCCATTATGAGCAGGGACTGTAATTACAGGATTCCGTTATAAAACTAAGGCATCACTAGCCCACTTTCTCCCACAAGGAACACCTGTACCCCTTATTCCCATGCTAGTAATTATTGAAACAATTAGTCTATTTATTCAACCCATAGCCTTAGCTGTACGACTTACAGCCAACATTACAGCAGGTCACTTACTTATACACCTCATTGGAGGCGCAGCACTTGCCTTAATCTCAATTAGTCCAACAACAGCCCTAATTACTTTTATTATTCTAATTCTCCTAACAATCCTAGAATTTGCTGTGGCCCTAATTCAAGCCTACGTTTTCACCCTTCTTGTAAGCCTATATCTACATGATAATACTTAA"
print ("ATP6|39.4|40.7|38.6")#enter the GC percentages for a, b, and c respectively here
#ATP8
atp8_seq_a= "ATGCCACAACTCGACACATCCACATGACTGGTAACTATCATCGCTATAATCCTTACATTATTTGCCCTAATCCAACTTAAATTTCATAAATATTCCTATCCATTAAGCCCAACACCAAAAACACTTAAGCCTACTTCTTTCCCCAGCCCATGAGAAACAAAATGAACGAAAATCTATTCTCCTCTTTTATTACCCCAACAATAA"
atp8_seq_b= "ATGCCACAACTTGACACATCTACATGACTAGTGACTATTACAGCTATAATCCTCACATTATTTATTCTAATTCAACTTAAATTTCATAAATATTCCTACCCACTAAGCCCAGCACCAAAAATATTTAAGTCCACTTCTTTTCCTACCCCATGAGAAATAAAATGAACGAAAATTTATTCTCCTCTTTTACCACCCCAACAATAA"
atp8_seq_c= "ATGCCACAACTTGACACATCCACATGACTGGTAACTATTATCGCTATAATCCTTACATTATTTATCCTAATTCAACTTAAATTTCATAAATACTCTTATCCATTAAGCCCAGCACCAAAAACATTTAAATCTACCTCTTTTCCCACCCCATGAGAGACAAAATGAACGAAAATCTATTCTCCTCTTTTATTACCCCAACAATAA"
print ("ATP8|36.3|32.8|33.3")
#COX1
cox1_seq_a= "ATGTTCATTAATCGTTGATTATTTTCTACCAACCACAAAGATATTGGAACTCTCTACCTTTTATTTGGAGCCTGAGCTGGAATGGTAGGAACAGCCCTCAGTCTGTTGATCCGAGCAGAATTGGGCCAACCCGGGACTTTACTTGGAGATGATCAAATCTATAATGTTATTGTCACCGCACATGCCTTTGTAATAATTTTCTTCATAGTTATACCTATCATGATTGGAGGCTTCGGGAACTGACTGGTCCCCCTAATAATTGGAGCCCCTGATATAGCTTTCCCCCGAATAAACAATATAAGCTTTTGACTCCTCCCACCATCTTTCCTTCTTTTATTAGCCTCATCAATAGTAGAAGCTGGCGCAGGGACTGGTTGGACTGTCTACCCACCACTAGCTGGCAACTTAGCTCATGCAGGGGCCTCAGTTGACCTTACTATCTTTTCCCTACACTTAGCTGGAGTTTCATCTATTTTAGGGGCTATTAATTTTATTACTACTATCATTAACATAAAACCTCCCGCTATATCTCAGTACCAAACACCCCTATTTGTATGATCCGTCCTCATCACAGCTGTGCTCCTGCTTCTCTCTTTACCAGTTTTAGCTGCCGGCATTACAATACTTTTAACAGACCGAAACTTAAATACAACCTTTTTTGACCCAGCAGGTGGTGGAGACCCCATTCTCTACCAACACTTATTCTGATTCTTCGGTCACCCTGAAGTATATATTCTTATTTTACCAGGGTTCGGAATAATTTCTCACATTGTAACCTACTATTCTGGGAAAAAAGAACCATTTGGATATATAGGAATAGTGTGAGCTATGATATCAATTGGCTTCCTTGGATTTATTGTTTGAGCCCACCATATATTCACGGTAGGTATAGACGTGGACACACGAGCTTATTTTACTTCAGCCACCATAATTATTGCTATTCCTACAGGGGTAAAAGTATTTAGTTGACTAGCAACTCTACACGGCGGTAATATTAAATGAGCTCCAGCAATACTTTGAGCCTTAGGCTTTATTTTCTTATTTACAGTAGGCGGTCTTACAGGAATTGTACTAGCTAATTCTTCTCTAGACATCGTTCTACATGATACATACTATGTAGTAGCTCACTTCCACTACGTATTATCCATAGGAGCTGTATTTGCTATTATAGGAGGGTTTGCTCATTGATTCCCTTTATTCTCAGGTTACACCCTAGATCAGACCTGAGCAAAAATCCACTTCACCGTAATATTTGTAGGAGTTAACTTAACCTTCTTCCCACAACATTTCCTTGGGCTTTCCGGCATGCCACGACGATATTCAGACTATCCAGACGCCTACACAATATGAAACACCGTTTCATCAATAGGCTCATTCATCTCTCTGACCGCTGTAATAGTAATAATCTTTATAATCTGGGAAGCCTTCGCCTCAAAGCGAGAAGTAGAGACCGTTGAGTTAACTACAACTAATCTAGAATGACTCCACGGATGTCCACCTCCGTATCATACATTCGAGGAGCCTGCCTACGTAAAAGCTTAA"
cox1_seq_b= "ATGTTCATTAATCGTTGATTATTTTCTACCAACCACAAAGACATTGGAACTCTCTACCTCTTATTTGGGGCCTGAGCTGGAATGGTAGGAACAGCCCTTAGTCTCTTAATCCGAGCAGAATTGGGCCAACCTGGAACTTTACTTGGTGACGATCAAATCTATAATGTTATTGTCACCGCACATGCCTTTGTAATAATTTTCTTCATAGTCATGCCTATTATGATTGGGGGCTTCGGGAACTGACTGGTCCCTCTAATAATTGGAGCCCCTGATATAGCTTTTCCCCGAATAAACAATATAAGTTTTTGACTTCTCCCCCCATCTTTTCTTCTCTTACTAGCATCCTCTATAGTTGAAGCAGGCGCAGGGACTGGTTGAACTGTTTACCCGCCCTTAGCTGGTAATTTAGCTCATGCAGGGGCCTCAGTAGACCTTACTATCTTTTCCCTGCACTTAGCAGGAGTTTCGTCTATTCTAGGGGCTATTAATTTTATTACGACCATTATTAATATAAAACCCCCCGCTATATCTCAATATCAAACGCCTCTATTTGTATGGTCCGTTCTTATTACAGCTGTGCTTCTGCTCCTCTCTCTACCAGTTTTAGCTGCCGGCATCACAATACTTTTAACAGACCGAAACTTAAACACAACCTTCTTTGACCCAGCAGGTGGTGGGGATCCTATTCTCTACCAACACTTGTTCTGATTCTTTGGACATCCTGAAGTATACATTCTTATTTTACCAGGGTTTGGAATAATTTCTCACATTGTAACCTACTATTCCGGGAAAAAAGAACCATTTGGGTATATAGGAATAGTATGAGCTATGATGTCTATTGGCTTCCTTGGATTTATTGTCTGAGCTCACCATATATTCACGGTAGGAATAGACGTGGACACACGAGCCTATTTTACTTCAGCAACTATAATTATTGCTATTCCCACGGGAGTAAAAGTATTCAGTTGACTAGCAACTCTTCACGGTGGTAATATTAAGTGGGCTCCAGCAATACTTTGGGCCCTAGGCTTTATTTTCCTATTTACAGTTGGGGGTCTTACAGGGATCGTGCTGGCTAATTCCTCTCTGGATATTGTCCTGCATGACACATACTATGTAGTAGCTCACTTCCACTACGTATTATCCATAGGAGCTGTATTCGCCATTATAGGAGGATTTGCTCATTGATTTCCTTTATTCTCAGGTTATACCCTAGACCAAACCTGAGCAAAAATCCATTTTACCGTAATATTTGTAGGAGTTAACTTAACCTTTTTCCCACAGCACTTCCTTGGGCTTTCTGGCATGCCTCGACGGTACTCAGATTACCCGGACGCTTATACGATGTGAAACACCGTCTCATCAATAGGCTCCTTCATCTCTCTTACGGCTGTAATAGTAATAATCTTCATAATCTGAGAAGCCTTCGCCTCAAAACGAGAGGTAGAAACCGTTGAGCTTACTACTACTAATTTAGAATGACTCCACGGATGTCCACCCCCATATCATACATTCGAGGAGCCCGCTTACGTAAAAGCCTAG"
cox1_seq_c= "ATGTTCATCAATCGTTGATTATTTTCTACCAACCACAAAGACATTGGAACTCTCTACCTTTTATTTGGAGCCTGAGCTGGAATGGTAGGAACAGCCCTAAGTCTGTTGATCCGAGCAGAATTAGGCCAACCTGGGACTTTACTTGGAGACGATCAAATCTATAATGTTATTGTTACCGCGCATGCCTTCGTAATAATTTTCTTCATAGTTATACCTATTATGATTGGAGGCTTCGGGAACTGACTAGTTCCTCTAATGATTGGAGCCCCTGATATAGCTTTCCCCCGAATAAACAATATAAGCTTTTGACTTCTCCCACCATCTTTCCTTCTCTTATTAGCCTCATCTATAGTAGAAGCTGGCGCAGGAACTGGTTGAACTGTCTACCCACCCCTGGCTGGTAACTTAGCTCATGCAGGAGCTTCAGTTGACCTTACTATCTTTTCCTTACACTTAGCCGGAGTTTCATCTATTCTAGGGGCTATTAATTTTATTACTACTATTATTAATATAAAACCCCCTGCTATATCTCAATATCAGACACCCCTATTTGTATGGTCCGTTCTCATCACAGCTGTTCTTCTTCTCCTCTCTTTACCAGTTCTAGCTGCCGGCATTACAATACTTTTAACAGACCGAAACTTAAATACAACTTTCTTCGACCCAGCAGGTGGTGGGGACCCTATTCTCTACCAACACTTATTTTGATTCTTCGGTCATCCTGAAGTGTATATTCTTATCCTACCAGGATTTGGGATAATTTCTCACATTGTTACCTACTATTCTGGGAAAAAAGAACCATTTGGATACATAGGAATAGTATGGGCCATAATGTCAATTGGCTTCCTTGGATTTATTGTTTGAGCCCATCATATATTCACAGTAGGAATAGACGTAGACACACGAGCCTATTTTACTTCAGCCACTATAATCATTGCAATTCCTACAGGGGTAAAAGTATTTAGTTGACTAGCAACTCTTCACGGTGGTAATATTAAATGAGCTCCAGCGATACTTTGAGCCTTAGGATTTATTTTCCTATTTACAGTAGGTGGTCTTACAGGAATTGTGCTAGCTAATTCTTCTTTAGACATTGTCCTACATGACACATACTATGTAGTAGCTCACTTCCACTACGTATTATCTATAGGAGCTGTATTCGCCATCATAGGGGGATTTGCTCATTGATTCCCTTTATTCTCAGGTTACACCCTAGACCAAACCTGAGCAAAAATTCACTTCACCGTAATATTTGTAGGAGTTAACTTAACCTTCTTCCCTCAACATTTCCTAGGACTTTCCGGCATGCCCCGGCGGTACTCAGACTACCCAGACGCATACACGATGTGAAATACCGTCTCATCAATAGGCTCCTTCATCTCTCTAACCGCTGTAATAGTAATAATCTTTATAATCTGAGAAGCCTTCGCCTCAAAACGAGAAGTAGAGACAGTTGAGCTTACTACTACTAACCTAGAGTGACTCCACGGATGTCCACCCCCATATCATACATTCGAGGAACCTGCCTACGTAAAAGCCTAA"
print ("COX1|40.9|41.9|40.9")
#COX2
cox2_seq_a= "ATGGCTTACCCTTTTCAGCTAGGCTTTCAAGATGCCTCATCTCCCATTATAGAAGAACTTCTTCACTTCCATGATCACACGCTCATAATCGTCTTCTTAATTAGCTCACTGGTCCTTTATATTATCTCACTCATGTTAACTACAAAACTTACGCATACAAGCACGATAGACGCTCAAGAAGTAGAGACTATCTGAACGATTCTTCCAGCTATTATTCTAATTATAATTGCTCTTCCCTCTCTACGAATCCTATATATAATAGACGAGATCAATAATCCCTCCTTGACAGTAAAGACAATAGGTCATCAATGGTACTGAAGCTATGAGTATACAGACTATGAAGATTTAAGCTTTGACTCCTATATAATTCCTACATCTGATCTTAGCCCTGGCGACTTACGACTTCTAGAAGTTGATAATCGAGTTGTTCTCCCAATAGAACTTCCCATCCGCATGTTAATCTCTTCAGAAGACGTACTCCACTCTTGAGCTGTTCCATCCCTAGGATTAAAAACAGATGCTATCCCTGGGCGCCTAAATCAAGCTACTCTCATCTCCACCCGGCCAGGACTCTTTTACGGCCAATGTTCAGAAATTTGTGGCTCAAACCATAGTTTTATACCTATTGTTCTTGAAATAGTTCCACTTAAGCACTTCGAGAACTGATCCTTATCCATAATCTAG"
cox2_seq_b= "ATGGCATACCCTTTTCAACTAGGCTTTCAAGATGCCTCATCCCCCATTATAGAAGAACTCCTTCACTTCCACGACCACACGCTTATAATCGTCTTCTTAATTAGCTCTCTGGTCCTTTATATTATTTCACTAATATTAACTACAAAACTCACGCATACAAGCACGATAGATGCCCAAGAGGTAGAGACTATCTGAACTATTCTTCCAGCCATTATTCTGATTTTAATTGCCCTCCCCTCCCTGCGAATCTTATATATAATAGACGAAATCAATAATCCCTCTCTGACAGTAAAGACAATGGGTCATCAATGATACTGAAGCTATGAATATACAGACTATGAAGATCTAAGCTTTGACTCCTACATAGTTCCTACACCTGATCTCAACCCTGGCGACCTACGACTTCTAGAAGTTGATAATCGAGTTGTTCTTCCAATAGAACTTCCAATCCGCATACTAATCTCTTCAGAAGACGTACTCCATTCTTGGGCTGTTCCGTCTCTAGGATTAAAAACAGATGCGATTCCTGGACGCTTAAATCAAGCTACCCTTATCTCCACCCGACCAGGACTCTTTTACGGTCAATGCTCAGAAATCTGTGGCTCAAACCATAGTTTCATGCCTATTGTTCTTGAAATAGTCCCACTTAAGCACTTCGAAAACTGATCCTTATCCATAATTTAA"
cox2_seq_c= "ATGGCATACCCTTTTCAACTAGGCTTTCAAGATGCCTCATCCCCCATTATAGAGGAGCTCCTCCACTTCCATGACCATACGCTCATAATCGTCTTCTTAATTAGCTCCCTGGTCCTTTATATTATTTCACTTATATTAACTACAAAACTTACGCACACAAGTACGATAGACGCTCAAGAAGTAGAGACTATCTGAACTATTCTTCCAGCTATTATTCTGATTATAATTGCCCTCCCCTCTCTGCGAATCCTATATATAATGGACGAAATCAACAACCCCTCCTTAACAGTAAAAACAATAGGTCATCAATGGTATTGAAGCTATGAATATACAGACTATGAAGATCTAAGCTTTGACTCTTATATAATCCCTACATCTGATCTTAACCCTGGCGACTTACGACTTCTGGAAGTTGATAATCGAGTTGTTCTTCCAATAGAACTTCCAATCCGTATGTTAATCTCTTCAGAAGATGTACTTCACTCTTGAGCTGTACCATCCCTAGGACTAAAAACAGACGCTATTCCTGGACGTTTAAATCAAGCTACTCTCATTTCCACACGACCAGGACTCTTCTACGGCCAATGTTCAGAAATCTGTGGCTCAAACCATAGTTTTATGCCTATTGTTCTTGAGATAGTTCCACTTAAACACTTCGAGAGCTGATCCTTATCCATGATCTAG"
print ("COX2|39.6|40.2|39.5")
#COX3
cox3_seq_a= "ATGACCCACCAAACCCACGCTTATCACATAGTTAACCCTAGTCCATGACCACTCACTGGAGCCCTATCCGCCCTACTTATAACATCAGGCCTAGCCATATGATTTCACTTTAACTCCCCCTTACTTCTCCTAATTGGCTTATTAACAAATACACTCACTATATATCAGTGATGACGAGATATTGTACGAGAAGGCACATTTCAAGGTCACCATACTCCCATTGTTCAAAAAGGTTTACGATATGGAATAATTCTATTTATTGTTTCAGAAGTCTTTTTCTTCGCAGGCTTCTTCTGAGCTTTCTATCACTCAAGCCTAGCCCCTACACCGGAACTAGGAGGTTGCTGACCTCCAACAGGTATTAAACCTCTTAACCCCCTTGAAGTTCCTCTACTTAACACCTCAGTCCTTCTAGCCTCAGGAGTTTCAATTACCTGAGCCCACCATAGCTTAATAGAAGGCAATCGTAAAAATATGCAACAAGCCTTAGCAATCACTATCCTCCTGGGCATCTACTTCACCCTACTTCAAGCATCAGAATACTATGAAACATCATTTACTATTTCAGATGGAGTTTATGGATCAACATTCTTTATAGCTACAGGATTCCATGGCCTTCACGTAATTATTGGTTCTACTTTCCTTACAGTTTGCCTCTTACGACAGCTCCACTTCCACTTTACATCAAGTCACCATTTTGGTTTTGAGGCAGCCGCATGATATTGACACTTTGTAGATGTCGTCTGACTATTCCTGTATGTATCAATTTATTGATGAGGATCAT"
cox3_seq_b= "ATGACCCACCAAACACACGCTTATCACATAGTTAATCCAAGCCCATGACCTCTCACTGGAGCCCTATCCGCTCTACTTATAACATCGGGCCTAGCCATATGATTTCACTTCAACTCCCCCTCACTTCTCCTAATTGGTCTACTAACAAACACACTCACTATATACCAGTGATGACGAGATATTGTGCGAGAAGGCACATTTCAAGGACACCATACTCCTATTGTCCAGAAAGGCTTGCGGTATGGGATAATCCTATTTATTATCTCAGAAGTCTTTTTCTTCGCAGGCTTCTTCTGAGCCTTCTATCACTCTAGCCTAGCCCCTACTCCAGAACTAGGGGGCTGCTGACCCCCAACAGGCATTAACCCTCTTAACCCCCTTGAAGTTCCCCTGCTCAACACTTCAGTCCTTCTTGCCTCAGGAGTTTCAATTACCTGAGCCCACCATAGCTTAATAGAAGGAAACCGTAAAAACATGCAACAGGCCTTAGCAATTACTATTCTCTTAGGTGTCTACTTCACTCTACTCCAAGCATCAGAATACTACGAAACATCTTTTACTATTTCAGATGGAGTCTATGGCTCAACATTCTTTATAGCCACAGGATTCCATGGCCTTCACGTAATTATTGGCTCTACTTTTCTTACAGTATGCCTTCTACGACAACTCCATTTCCACTTCACATCAAACCATCACTTTGGCTTTGAAGCAGCCGCATGATACTGACACTTTGTAGATGTTGTCTGATTATTCTTATATGTGTCAATTTATTGATGAGGATCAT"
cox3_seq_c= "ATGACCCACCAAACCCACGCCTATCATATAGTTAACCCAAGTCCATGACCACTTACCGGGGCCTTATCCGCCCTACTTATAACATCAGGCTTAGCCATATGATTCCACTTTAACTCCCCCTCACTTCTTCTAATTGGCTTGTTAACAAACACACTCACTATATACCAGTGATGACGAGATATTGTACGAGAAGGCACATTTCAAGGCCACCATACTCCTATTGTTCAAAAAGGTTTACGATATGGAATAATCCTATTTATTGTTTCAGAAGTCTTTTTCTTTGCAGGTTTCTTCTGAGCTTTCTACCACTCAAGCCTAGCTCCCACGCCAGAACTAGGGGGCTGCTGGCCTCCTACAGGTATTAAACCTCTTAACCCCCTTGAAGTTCCCCTACTTAACACCTCAGTCCTTCTAGCCTCAGGAGTCTCAATTACCTGAGCTCACCATAGCTTAATAGAAGGAAATCGTAAAAACATGCAACAAGCCTTAGCAATCACTATTCTTCTAGGTATTTACTTCACCCTACTTCAAGCATCAGAATACTATGAAACATCATTTACTATCTCAGATGGAGTTTATGGCTCAACATTCTTTATAGCCACAGGATTTCATGGCCTCCACGTAATTATTGGTTCTACTTTCCTTACAGTTTGCCTTTTACGGCAGCTCCACTTTCACTTTACATCAAGTCATCACTTTGGTTTTGAAGCAGCCGCATGATATTGGCACTTTGTAGATGTTGTCTGACTATTCCTGTATGTATCAATTTATTGATGAGGATCAT"
print ("COX3|40.9|43.1|41.3")
#CYTB
cytb_seq_a= "ATGACCAACATTCGTAAAACTCACCCCCTACTAAAAATTGTTAACCACTCCCTAATTGACCTTCCCGCCCCCTCAAACATCTCAGCCTGATGAAACTTTGGCTCCCTATTAGGACTATGCCTAATAATCCAAATCCTAACTGGCCTGTTCCTAGCTATACACTACACATCAGACACAGCAACAGCATTTTCTTCAGTCACACATATTTGCCGAGACGTAAACTATGGCTGACTTATTCGTTACCTACACGCCAACGGAGCATCAATATTTTTTATCTGCTTATATATACATGTAGGTCGTGGAATCTACTATGGATCATATACTTACCTAGAAACCTGGAATATTGGCATTATTCTACTATTTGCAGTAATAGCCACAGCATTTATAGGCTATGTCCTCCCATGAGGACAAATATCATTCTGAGGCGCTACTGTAATTACTAATCTTTTATCAGCTATCCCCTACATTGGAACAACCCTAGTTGAATGAATTTGAGGAGGGTTTTCAGTCGACAAAGCCACACTCACCCGATTCTTCGCTTTCCACTTCATTCTCCCATTCATCATCGCAGCACTAGTGATGATTCACTTACTTTTCCTCCATGAAACTGGCTCCAATAATCCATCGGGTATCCCATCAGACTCTGATAAGATTCCGTTCCACCCCTATTACACAATTAAAGACCTTCTAGGATTTCTCATACTTATCCTCCTGCTCATACTCCTAGTCTTATTCTCTCCTGACCTTCTCGGGGACCCAGACAATTACACCCCTGCCAATCCTCTCAACACTCCTCCCCATATCAAACCTGAATGATATTTTCTATTTGCCTACGCCATTTTACGCTCCATCCCTAACAAACTAGGAGGTGTTCTAGCCCTAGTTATGTCAATTCTCATCCTAGCAATTATCCCCCTCCTCCACATATCCAAACAACGCAGCATAATATTCCGACCCATTAGCCAAGTTCTCTTCTGAATCCTCGTTGCTGACCTTCTGACACTCACATGAATCGGAGGACAACCAGTTGAACACCCATTTATTACTATTGGACAAGTAGCATCTATCCTTTACTTCTCTATCATCCTCATCCTTATACCTCTTGCAAGCTTAATTGAGAATAAAATCCTTAAATGAAGG"
cytb_seq_b= "ATGACCAACATTCGTAAAACGCACCCCCTACTAAAAATTATTAACCACTCCCTAATTGACCTTCCCGCCCCCTCAAACATCTCAGCCTGATGAAACTTTGGCTCTCTACTAGGCCTATGCCTAATGATCCAAATCTTAACTGGCCTGTTCCTTGCTATACACTACACATCAGACACAGCAACAGCATTCTCCTCAGTCACTCATATCTGCCGAGACGTAAACTACGGCTGACTTATCCGTTACCTACACGCTAACGGAGCATCAATATTCTTTATTTGTCTATACATACACGTAGGCCGTGGAATTTATTATGGATCATATACTTATCTGGAAACCTGAAATATTGGTATCGCTCTCCTATTTGCAGTAATAGCCACGGCATTCATAGGCTACGTCCTCCCATGAGGACAAATATCATTCTGAGGGGCTACCGTAATTACTAACCTCCTATCAGCTATCCCCTACATTGGGACAACCCTAGTTGAATGAATCTGAGGTGGATTTTCAGTTGATAAAGCCACTCTCACCCGATTCTTCGCTTTCCACTTCATCCTCCCGTTCATCATTGCAGCGCTAGTAATAATTCACCTACTCTTCCTCCATGAAACCGGCTCCAACAACCCATCAGGCATCCCATCAGACTCCGATAAAATCCCATTCCACCCCTATTATACAATCAAAGACGTCCTAGGATTTCTCATACTAATTCTTCTTCTCATGCTCCTAGTCTTATTCTCCCCTGATCTTCTTGGCGACCCGGACAACTACACCCCTGCCAACCCCCTTAATACTCCTCCCCACATCAAACCTGAGTGGTACTTCCTATTTGCCTATGCCATTCTACGCTCTATTCCTAATAAACTAGGAGGTGTTCTAGCCCTAGTCATATCTATCTTAATCCTTGCAATCATTCCCTTCCTCCACACATCCAAACAACGCAGCATAATATTCCGACCCATCAGCCAAATTCTTTTCTGGATTCTTGTTGCAGACCTCCTGACACTCACATGAATTGGAGGGCAACCAGTTGAACACCCATTTATCACCATTGGTCAAGTAGCATCCATTCTTTACTTCTCTATTATCCTCATCCTCATACCTCTCGCTAGCTTAATTGAAAACAAAGTCCTCAAATGAAGG"
cytb_seq_c= "ATGACCAACATTCGTAAAACGCACCCCCTACTAAAAATTGTTAACCACTCTCTAATCGACCTTCCCGCCCCCTCAAACATCTCTGCCTGATGAAACTTCGGCTCTCTATTGGGATTATGCCTAATAATCCAGATCCTAACTGGCTTATTTCTAGCCATACACTACACATCAGACACAGCTACAGCATTCTCCTCAGTTACACATATTTGCCGAGATGTAAACTACGGCTGACTCATTCGTTACTTACACGCTAATGGAGCATCAATATTCTTTATTTGCTTATATATACATGTAGGCCGTGGAATCTACTACGGCTCATATACTTACCTAGAAACCTGAAACATTGGCATTATTCTACTATTCGCAGTAATGGCTACAGCATTCATAGGCTACGTCCTCCCATGAGGACAAATATCATTCTGAGGGGCTACCGTAATTACTAATCTTCTATCAGCCATTCCTTATATCGGAACAACCCTAGTTGAATGAATCTGAGGAGGATTTTCAGTCGATAAAGCCACACTTACCCGATTTTTCGCTTTTCACTTTATCCTCCCATTTATTATTGCAGCTCTAGTGATAATTCACTTACTTTTCCTCCATGAAACTGGCTCCAATAACCCATCAGGCATCCCATCAAACTCTGATAAAATTCCATTCCACCCCTACTACACAATTAAAGACGCGCTAGGATTTCTTATACTCATTCTCCTGCTCATACTCCTAGTCTTATTCTCCCCTGATCTTCTCGGGGACCCAGACAATTATACCCCTGCCAACCCCCTCAACACTCCTCCTCACATCAAACCTGAGTGATATTTCCTATTTGCCTACGCCATCCTACGTTCCATCCCTAATAAACTAGGTGGTGTTCTAGCCCTAGTTATATCAATTCTTATCCTAGCAATTATCCCCTTCCTTCATATATCCAAACAACGTAGCATAATATTCCGCCCCATTAGCCAAGTCCTTTTCTGAATCCTTGTCGCAGACCTTCTTACACTCACATGAATTGGAGGACAACCAGTTGAACACCCCTTTATCACTATTGGTCAAGTAGCATCTATCCTATACTTCTCCATCATCCTTATCCTCATACCTCTCGCAAGCCTAGTCGAGAATAAAATCCTCAAATGAAGG"
print ("CYTB|41.8|43.9|41.9")
#NAD1
nad1_seq_a= "ATGTTCCTAATCAATACATTTCTCTTAATTTTACCTGTACTTCTAGCTATAGCCTTCCTAACCTTAGTAGAACGAAAAATCCTAGGCTATATACAACTTCGAAAAGGCCCAAACATTGTAGGCCCCTATGGACTTCTTCAACCAATTGCAGACGCTATCAAACTATTCACTAAGGAACCCCTACGACCCCTAACATCATCATCTCTTCTCTTCATCATCGCCCCAACTCTGGCACTAACCTTAGCACTCTCAATATGACTCCCAATCCCCATGCCATATCCATTAATTAATCTCAACATAGGTGTATTGTTTATCCTAGCAACCTCTAGCTTAGCAGTCTACTCAATCCTATGATCAGGTTGAGCATCCAACTCAAAGTACGCACTATTTGGGGCCCTCCGAGCAGTCGCACAAACCATTTCGTACGAGGTCACATTAGCAATTATCCTCCTATGTATTCTATTAATAAATGGCTCATTTACACTTTCATCTCTTATCACAACACAAGAATACATATGAATCCTCCTCCCAGCATGGCCCCTAGCCATAATATGATTTATCTCAACCCTAGCAGAAACAAACCGAGCCCCCTTTGACCTTACTGAAGGTGAATCGGAACTTGTCTCTGGATTTAATGTAGAATACGCAGGTGGCCCATTTGCCCTATTTTTCTTAGCTGAATACACTAACATTATTATAATGAACGCCCTTACAGCTGTCCTATTCCTAGGCTCATTCCACAGTCACACTAATCCAGAAATATTCACAATCAACTTCGCCGCTAAAACTCTCCTACTAACAATAACATTCCTATGGATCCGAGCATCCTACCCTCGATTTCGTTATGACCAACTTATACATCTTCTATGAAAAAGCTTCCTGCCCCTAACACTAGCCCTATGTATATGATACATCTCTATACCTATTATACTTTCAAGTATCCCCCCTCACATAT--"
nad1_seq_b= "ATGTTTCTAATTAATACCTTTCTCCTAATTCTACCTGTACTTCTAGCTATAGCCTTCCTAACCTTGGTAGAACGAAAAATCCTAGGTTACATACAACTTCGAAAGGGCCCAAACATTGTAGGTCCCTATGGACTTCTTCAACCGTTTGCAGATGCAATCAAACTATTCACCAAAGAACCCCTACGACCCTTAACATCATCATCTCTTCTCTTCATCATTGCTCCAACTCTAGCACTAACCTTAGCACTCTCAATATGGCTCCCCATCCCCATACCATATCCTCTTATTAATCTTAATATAGGCGTGTTATTTATTCTAGCAACCTCTAGCCTAGCGGTCTACTCAATTTTGTGATCAGGTTGAGCATCCAACTCAAAATATGCACTATTTGGGGCACTACGAGCAGTCGCACAGACCATTTCTTATGAGGTTACACTAGCAATTATCCTTCTATGTGTCCTATTAATAAACGGCTCATTTACACTCTCATCCCTTATTACAACACAAGAGTACATGTGAATTCTCTTCCCAGCATGACCCCTAGCTATAATATGATTTATTTCAACCCTAGCAGAAACAAACCGGGCGCCTTTCGACCTTACCGAAGGCGAGTCAGAACTCGTCTCTGGATTTAACGTAGAATACGCAGGCGGCCCATTCGCCCTATTCTTCCTAGCTGAATATATTAACATTATTATAATGAACGCCCTTACGACTATCTTATTCCTAGGCTCATTTCATAGTCATACTAACCCAGAAATATTTACAGTTAACTTTGCCGCTAAAACTCTTCTGTTAACAATGACATTCCTATGAATCCGAGCCTCTTACCCTCGATTTCGCTATGATCAACTCATGCATCTTCTGTGAAAAAGCTTCCTACCCCTAACACTAGCCCTATGTATATGACACATCTCTATACCTGTTACACTTTCAAGTATCCCCCCTCACATAT--"
nad1_seq_c= "ATGTTTCTAATCAACACCTTCCTCCTAATCTTACCTGTCCTTCTAGCCATAGCCTTCCTAACTTTAGTAGAACGAAAAATCCTAGGCTATATACAACTTCGAAAGGGCCCAAACATTGTAGGACCCTATGGGCTTCTTCAACCAATTGCAGATGCTATTAAACTATTTATTAAAGAACCCCTACGACCCCTAACATCATCATCTCTTCTTTTTATCATCGCCCCAACTCTAGCACTAACCTTAGCACTCTCGATATGACTCCCTATTCCCATGCCATATCCACTTGTTAATCTGAACATAGGCGTATTATTTATCCTAGCAACCTCTAGTCTAGCAGTCTACTCAATCCTATGATCAGGTTGAGCATCCAACTCAAAATACGCACTATTTGGAGCCCTCCGAGCAGTCGCACAGACCATTTCTTATGAGGTCACCCTAGCAATTATTCTTTTATGTGTCTTATTAATAAACGGCTCATTTACACTTTCATCACTCATCACAACACAAGAATACATATGAATCCTCTTTCCAGCATGACCCCTAGCTATGATATGATTTATTTCAACCCTAGCAGAAACAAATCGAGCCCCCTTTGATCTCACTGAAGGTGAATCAGAACTTGTTTCCGGATTTAACGTAGAATACGCAGGTGGCCCATTTGCCCTATTTTTCCTAGCTGAATACACTAACATTATCATAATAAATGCCCTTACAACTATCTTATTCCTAGGCTCATTCCACAGTCACACTAACCCAGAAATATTTACAATTAGCTTCGCCGCTAAAACTCTCCTACTAACAATGACATTTCTATGAATCCGAGCATCATACCCTCGATTCCGTTATGATCAACTAATACATCTTCTATGAAAAAGCTTCCTACCCCTAACGCTAGCCCTATGCATATGACACATCTCTATGCCTATTATACTCTCAAGTATTCCCCCTCACATATAG"
print ("NAD1|40.8|40.7|40.0")
#NAD2
nad2_seq_a= "ATTAACCCCCTAATCTTTTCCATCATTCTATTTACCTTATTCCTAGGTACAATAATTACTATATTCAGCTCCCATTGACTGACTATGTGAATCGGTCTAGAAATAAATATATTAGCTATTATTCCCATCTTAATTAATAAAGCCACACCACGATCAACAGAAGCCGCAACTAAATATTTTCTAACACAAGCCACAGCATCAATAATTTTAATGATAGCAATTACACTCAATATTCTTGACTCGGGCCAATGAACATTAATTAATCCACAAAATAACTTCACCCCAATCATAATCATACTAGCCCTAATTATTAAACTAGGAATAGCCCCATTTCATTTTTGAGTCCCAGAAGTCACCCAAGGAGTCCCCCTAAAATCGGGCCTTATTCTTCTTACATGACAAAAACTAGCCCCTTTATCCATCCTCTATCAAATTTCTCCTTCAATTGATTCAACCATGATAATATTAGTAGCCATTCTCTCGATCATGGTTGGTGGCTGAGGAGGACTTAACCAGACTCAACTACGAAAAATCCTAGCATATTCCTCAATTGCCCATATAGGATGAATGGCAGCTATCATTACATTCAACCCCAATACTATAATTCTGAACTTAATCATTTATATCTTACTTACAATTCCCATATTTATAATGTTTATTCAGCACACAAACACTACTACACTATCCCTATCACAGATATGAAACAAAACCCCATTAATAGTAACAGCTATTCTAATTACTTTAATATCCCTAGGAGGCCTCCCTCCACTAACAGGCTTTATTCCAAAATGAATCATCATTCAAGAATTAACAAAAAATGGCAACATCATTATGCCCACAATAATAGCTATACTAGCCCTCCTAAACCTTTACTTTTACTTACGCCTAATCTACTCTTCTTCACTAACAATATTTCCAACAACCAACAACTTAAAAATAAAATGACAATTCGAACCAATAAAACGTATAACATTTATAGCCCCACTAATTATTTTATCAACAATATTCCTCCCTCTCACACCAATACTCTCAGTATTAAATTAA"
nad2_seq_b= "ATTAATCCCCTAATCTTTTCTATTATTTTATTTACCTTATTCCTAGGCACAATAATTACCATATTCAGCTCCCATTGGCTAACTATGTGAATTGGATTAGAAATAAATATACTAGCTATTATTCCTATTCTAATTAATAAAGCCACACCACGATCTACAGAAGCCGCAACTAAATATTTTTTAACACAAGCCACAGCATCAATAATTCTAATAATAGCAATTACACTTAACATCCTTGACTCAGGCCAATGGACATTGATCAACCCACAAAATCACTTCACCCCAACTATAATCATACTAGCTCTCGTTATCAAACTAGGTATAGCCCCCTTCCACTTCTGAGTACCAGAAGTCACCCAAGGGATTCCCCTAAAATCTGGCCTTATCCTCCTTACATGACAGAAATTAGCCCCTCTATCTATCCTCTATCAAATCTCTTCTTCAATTGATTCAACTATAATAATACTAGTAGCTATCCTATCAATTATAGTTGGTGGCTGAGGAGGATTAAATCAAACTCAACTACGAAAAATCCTAGCATACTCCTCAATTGCACATATAGGATGAATAGCAGCCATTATTACATTCAACCCCAATACCATAATTCTAAACTTAATCATTTACATTTTACTTACAATCCCCATATTTATAATATTTATTCAACATACAACTACTACCACACTATCCCTATCACAAATATGAAACAAAACCCCATTTATAGTAACAACCATCCTGATCACTTTAATATCTCTAGGTGGCCTCCCTCCACTTACAGGCTTTATTCCAAAATGAATCATCATTCAAGAATTAACAAAAAATGGCAACATCATTATCCCTACTGTAATAGCTATACTAGCCCTCCTAAATCTTTACTTTTACTTGCGCCTAATCTACTCTTCTTCTCTAACAATATTTCCAACAACCAATAACTTAAAAATAAAATGACAGTTTGAGTCAATAAAACGCATAACATTTATAGCCCCACTAATTATTTTATCTACAATATTTCTCCCCCTAACACCAATACTCTCAATCCTAAATTAA"
nad2_seq_c= "ATTAACCCCCTAATCTTTTCCATCATCCTATTTACCTTATTCCTAGGCACAATAATTACCATATTTAGCTCCCATTGGCTAACTATATGAATTGGATTAGAAATAAATATGTTAGCTATTATCCCTATCCTAATCAATAAGGCCACACCACGATCAACAGAAGCTGCAACTAAATATTTTCTAACACAAGCCACAGCATCAATAATTTTAATAATAGCCATCACACTTAACATCCTTGACTCAGGCCAATGAACACTAATTAACCCACAAAATCACTTTACACCAATCATAATTATACTAGCCCTAATTATTAAGCTAGGAATGGCCCCCTTCCACTTCTGAGTACCAGAAGTCACCCAAGGAGTCCCCCTGAAATCGGGTCTTATCCTCCTTACATGACAAAAACTAGCCCCTCTATCCATTCTTTATCAGATTTCTTCCTCTATTGACTCAACTATGATAATACTAGTAGCTATTCTCTCAATCATAGTTGGTGGCTGAGGAGGACTAAACCAGACTCAACTACGAAAGATCCTAGCGTATTCCTCAATTGCCCATATAGGATGAATAGCAGCCATCATTACATTCAACCCTAACACCATAGTCCTAAACTTAATTATTTATATTTTACTTACAATTCCTATATTCATAATGTTTATTCAACACACAAGCACTACTACGCTATCCCTATCACAAATATGAAACAAAACCCCATTAATAGTAACAGCAATTCTAATCACTTTAATATCACTAGGAGGCCTCCCTCCACTGACAGGCTTTATTCCAAAGTGAATTATTATTCAAGAATTAACAAAAAATGGCAACATCATTATACCCACTATAATAGCTATACTAGCCCTCCTAAACCTTTTCTTTTACTTACGTCTAATCTACTCTTCTTCACTAACTATATTCCCAACAACCAACAACCTAAAAATAAAATGACAATTTGAATCAATAAAACGTATAACATTTATAGCCCCACTAATCATCTTATCCACAATATTTCTCCCTCTCACACCTATACTCTCAGTACTAAACTAG"
print ("NAD2|34.1|33.7|35.3")
#NAD3
nad3_seq_a= "ATTAACCTAATTCTAGTTTTACTAATTAATATATCGATCTCCCTAATCCTAGTGACCATTGCATTTTGACTCCCTCAATTAAATATCTACTCAGAAAAAACAACCCCCTATGAATGCGGATTTGACCCTATAGGATCAGCACGACTCCCCTTCTCAATAAAATTTTTCTTGGTAGCAATTACATTCTTATTATTCGATCTAGAAATTGCCCTTCTTCTTCCTCTTCCATGGGCCGCACAATTTAACAATCTAAACCTAGTTCTCATCATAGCACTTATGCTTATCTCTATCCTAGCCCTGGGCTTGGCCTACGAGTGAATCCAAAAAGGCCTAGAATGAGTAGAAT-"
nad3_seq_b= "ATTAACCTAATTCTAGTTCTATTAATTAATATAACGATCTCCTTAATCCTTGTAACTATTGCATTCTGACTCCCTCAGTTAAATATCTATTCAGAAAAGACAAGCCCCTACGAATGCGGATTTGACCCTATGGGTTCAGCACGACTCCCCTTCTCAATAAAATTTTTCCTAGTAGCTATTACATTCTTACTATTTGACCTAGAAATCGCTCTTCTTCTTCCTCTTCCATGAGCCGCACAATTTAATAATCTGAGTCTAGTTCTTATTATAGCACTTATACTTATCTCAATCCTAGCCCTAGGACTGGCCTATGAATGAATCCAAAAAGGCTTAGAATGAGTAGAATA"
nad3_seq_c= "ATTAACCTCATTCTAGTTTTACTAATTAATATAACTATTTCCCTAATCCTGGTGACCATTGCATTTTGACTTCCCCAGTTAAATATTTACTCAGAAAAAACAAGCCCCTACGAATGCGGATTTGACCCCATGGGGTCAGCACGACTTCCATTCTCAATAAAATTTTTCTTAGTGGCAATCACATTCCTACTATTTGATCTAGAAATCGCTCTTCTTCTCCCTCTTCCATGAGCCGCACAATTTAATAACCTAAATTTAGTCCTCATCATAGCACTTATACTTATCTCAATCCTAGCCCTAGGACTGGCCTACGAGTGAATCCAAAAAGGCCTAGAATGAGTAGAAT-"
print ("NAD3|37.9|36.0|38.2")
#NAD4
nad4_seq_a= "ATGCTAAAAACTATTATCCCCACAATTATACTCATTCCCACTGTATGATGATCTAAAAATCACATAATCTGAATCAATGCAACAATCTACAGCCTACTAATTAGCCTAACTACTTTTCTTCTTCTCAATCAGCCAAACGACACCAACTTAAACCTATCAACCACATTTTTCTCAGATGCCCTTTCCACTCCTCTTTTAATACTAACAGTTTGACTCCTACCCCTAATAATCCTAGCAAGCCAACATCACTTAAGCAAAGAATCATTACTACGCAAAAAAATATATATCTCTCTTCTTATCTCCCTACAAATCTTCCTAGTAATAACATTCTCAGCCACAGAACTTATCTTATTTTATATTCTATTTGAAGCAACACTAATTCCTACGCTAATCATTATCACCCGATGAGGCAACCAAACAGAGCGACTTAATGCAGGAACTTACTTTTTATTCTATACCCTTATAGGATCACTCCCTTTACTAGTTGCCCTAATTCACCTTCAAAATTCCATAGGATCCCTTAACTTCCTTCTAATCCAACTATCCAATGAATCCCTAACAACATCATGGTCTAATTCACTTATGTGACTAGCATGTATAATAGCATTTTTAGTCAAAATACCCCTTTATGGTCTTCACCTTTGACTCCCAAAAGCCCATGTTGAAGGCCCCATTGCAGGCTCTATAGTCCTAGCAGCCATCCTACTTAAACTAGGAGGATATGGTATGATACGTATTACTATTCTACTTAATCCAATCACAGAATATATAGCCTATCCATTTCTTATACTCTCCCTATGAGGTATAATCATAACTAGTTCCATTTGCCTTCGACAAACAGACCTGAAATCACTAATTGCCTACTCTTCAGTAAGCCATATAGCCTTAGTAATCGTCGCAATTCTAATTCAAAGCCCATGAAGTTTTATAGGAGCCACAGCATTAATAATTGCACATGGCCTTACCTCCTCCTTATTATTTTGCCTAGCTAACTCCAATTATGAACGTGTCCACAGTCGAACTATACTTTTAGCTCGAGGATTACAAACGATTCTCCCTTTAATAGCAGCATGATGACTACTCGCCAGCCTCACCAACCTAGCCCTGCCACCAACCATTAACCTTCTAGGAGAGCTTCTCATCGTCATAGCATCTTTCTCATGATCAAATCTCACTATTATCCTTATAGGAACTAATGTTCTAATTACAGCACTTTACTCTCTTTATATACTATCAACCACCCAACGAGGAAAGTTTACATATCATACAAATAATATCTCCCCTACATTCACTCGAGAAAATACTCTCATAATACTCCACCTAGCTCCTCTACTTCTCTTGTCTATTAATCCTAAGATTATCCTAGGCCCAATGCTCT"
nad4_seq_b= "ATGCTAAAAACTATTATCCCTACAATTATACTTATCCCCACTGTATGATGATCTAAAAATAACATAATCTGAATCAACGCAACAATCTACAGCCTACTAATTAGCCTAACCACTTTTCTTCTCCTTAATCAACCAAACGATACTAACTTAAATTATTCAACCACATTCTTTTCAGACGCCCTCTCCACTCCCCTTCTAATGCTAACAGTTTGACTTCTACCTCTAATAATCCTAGCAAGCCAACATCATTTAAGCAAAGAATCACTACTACGCAAGAAAACATACATTTCTCTTCTTGTCTCTCTACAGATCTTTCTAGTGATAACATTCTCAGCCACTGAACTTATCTTATTTTATATTCTATTTGAAGCAACATTAATCCCCACACTAATTATCATTACTCGATGGGGGAATCAGACAGAACGACTTAACGCAGGAACTTACTTTTTATTTTATACCCTTATAGGATCACTCCCCTTGCTTGTTGCCTTGATTCATCTTCAAAACTCCATAGGGTCTCTTAATTTTCTTCTAATACAACTCTCTAATGAATCCCTCCCAACATCATGATCTAGCTCACTAATATGATTAGCATGTATAATAGCATTTTTAGTCAAAATACCCCTCTATGGCCTTCACCTCTGACTCCCTAAAGCCCATGTTGAAGCCCCCATTGCAGGCTCTATAGTCTTAGCAGCCATCTTACTTAAACTAGGGGGCTACGGGATAATACGTATTACAATTTTACTTAACCCAGTCACAGAGTATATAGCCTACCCATTTCTCATACTCTCCTTATGAGGCATAATCATAACCAGCTCCATTTGCCTTCGACAAACAGACCTAAAATCACTAATTGCTTACTCTTCAGTAAGCCATATAGCCTTAGTAATCGTTGCAATCCTTATTCAAACCCCATGAAGTTTTATAGGAGCCACAGCATTAATGATTGCCCATGGCCTTACCTCTTCCTTATTATTTTGCTTAGCGAACTCAAATTACGAGCGCATCCACAGTCGAACTATATTATTAGCTCGAGGACTACAAACTATTCTCCCCTTAATAGCAGCATGATGGCTACTTGCTAGCCTCACCAACCTAGCCCTACCACCTACTATTAATCTTCTAGGTGAACTCCTCGTCGTCATGGCATCTTTTTCATGATCAAGCCTCACCATTATCCTTATAGGAACTAATGTTCTAATTACAGCACTTTACTCCCTTTATATATTATCAACCACCCAACGAGGAAAATTCACATATCATACAAATAATATTTCCCCTACATTTACCCGAGAAAATACCCTCATAACACTCCACTTAGCCCCCCTACTTCTCCTGTCTATCAACCCTAAGATTATCTTAGGCCCAATGCTCT"
nad4_seq_c= "ATGCTAAAAACTATTATCCCCACAATTATACTCATTCCCACTGTATGATGATCTAAAAGTCGCATAATCTGAATCAACGCAACAGTTTACAGCCTACTAATTAGCCTAACTACTTTTCTTCTACTTAATCAACCAAACGACACTAACTTAAACCTATCAACCACATTTTTCTCAGATGCCCTCTCCACACCCCTTTTAATATTAACAGTTTGACTTCTGCCCCTTATAATCCTAGCAAGCCAACATCACTTAAGCAAAGAATCATTACTACGCAAAAAAACATATATTTCTCTCCTTATTTCCCTACAAATCTTCCTAGTAATAACATTCTCAGCTACAGAACTCATCTTATTTTATATTCTATTTGAAGCAACACTAATCCCTACACTAATTATTATTACACGATGAGGTAATCAAACAGAACGACTAAATGCAGGAACTTACTTTTTATTCTATACCCTTATAGGATCGCTCCCTTTACTAGTTGCCCTAATTCATCTTCAAAATTCTATAGGGTCTCTTAATTTTCTTTTAATCCAACTCTCTAACGAATCCCTGCTAACATCATGATCTAATTCACTAATATGATTAGCATGTATAATAGCATTTTTAGTCAAAATACCCCTCTATGGTCTTCTTCTCTGACTTCCAAAAGCCCATGTCGAAGCCCCCATTGCAGGTTCTATAGTCCTAGCGGCCGTTTTACTTAAACTAGGGGGATACGGTATAATACGTGTTACTATTTTACTTAACCCAATCACAGAATACATAGCCTATCCATTTCTCATGCTCTCCCTATGAGGCATAATCATAACCAGCTCCATTTGCCTCCGACAAACAGACCTAAAATCACTAATTGCTTACTCTTCAGTAAGCCACATAGCCTTAGTAATCGTAGCAATTCTTATTCAAACTCCATGAAGCTTTATAGGAGCAACAGCATTAATAATTGCTCACGGCCTCACCTCCTCCTTATTATTTTGCCTAGCTAATTCCAATTATGAACGTGTCCACAGTCGAACTATACTACTAGCTCGAGGATTACAGACTGTTCTTCCCTTGATAGCAGCCTGATGACTACTTGCCAGTCTCACCAACCTGGCCCTGCCACCGACCATTAACCTTCTAGGAGAGCTTCTAATTGTCATAGCATCTTTTTCATGATCAAACCTTACCATCATCCTTATAGGAACTAATGTTCTAATTACAGCACTCTACTCCCTCTATATATTATCAACCACCCAACGAGGAAAATTTACATACCATACAAATAATATTTCCCCTACATTCACTCGAGAAAATACTCTCATAATACTCCACCTAGCACCTCTTCTTCTTTTATCTATTAATCCTAAAATCATCTTAGGCCCAATAT---"
print ("NAD4|37.4|38.4|37.2")
#NAD4L
nad4l_seq_a= "ATGCCTTCAATCTACGTCAATATCTTCCTAGCGTTTATCTTTGCCCTTTTAGGCATGCTAGTTTACCGATCCCATTTAATATCTTCTCTTTTATGCTTAGAAGGAATAATATTATCACTATTCATTCTAATCACATTAACAGCTCTAAATATACACTACACACTATCTTTCATATTTCCAATTGTTCTCTTAGTGTTCGCGGCCTGTGAGGCCGCAATTGGGCTGGCCCTTCTTGTTATAGTATCTAATACCTATGGTATAGATTATGTCCAGAATCTGAACCTTCTACAATGCTAA"
nad4l_seq_b= "ATGCCTTCAATCTACATCAATATCTACCTAGCATTTATCTTTGCCCTCTTAGGTATGCTAATTTACCGATCTCACCTAATATCTTCTCTCCTATGCTTAGAAGGGATAATATTGTCACTATTTATTCTAATTACACTAACGGCCCTAAATACACATTATACATTATCTTTTATGTTCCCAATCATTCTCCTAGTGTTTGCGGCTTGCGAAGCCGCAATTGGTCTGGCCCTACTTGTTATAGTATCTAATACTTATGGCATAGACTATGTCCAAAACCTGAACCTCCTACAATGCTAA"
nad4l_seq_c= "ATGCCTTCAATCTACGTCAATATTTTCCTAGCATTTATCTTTGCCCTCTTAGGCATGCTAATTTACCGATCTCATTTAATGTCTTCTCTCTTATGCCTAGAAGGAATAATACTATCACTGTTTATTTTAATTACATTAACAGCCCTTAATATACACTTTACATTGTCATTTATATTTCCAATTGTTCTTTTAGTATTTGCGGCCTGTGAGGCCGCAATTGGGCTAGCCCTACTTGTTATAGTATCTAACACCTATGGCATAGATTACGTCCAAAATCTAAATCTTCTACAATGCTAA"
print ("NAD4L|36.4|37.0|34.3")
#NAD5
nad5_seq_a= "ATTAACCTATTCTCTACTTCAATAGCCGTCTCAATCATTATCCTGGTTCTCCCAATTATTGCCTCATTTACTAGCATTTTTAATCACAGCAACTACCCCTATTATGTAAAAACTTCAGTATCCTATGCATTTATAATTAGTCTTATCCCAACACTAATCTTCATTATCTCAAACCAAGAGACAATAGTATCTAACTGACACTGAATAACAATTCATACTCTAAAACTCATAACCAGCTTTAAACTAGACTATTTCTCTATACTATTCACTCCAATCGCACTATTCGTAACATGGTCCATTATAGAATTCTCTATATGATATATACACTCAGATCCTAAAATCAATCAATTCTTTAAATATCTACTTATATTTCTAATCACCATACTTATCCTAGTCACCGCCAACAATCTCTTCCAATTATTTATCGGATGGGAAGGAGTAGGAATTATATCATTTCTCCTTATCGGCTGATGACACGGTCGGACAGACGCTAACACCGCAGCCTTACAAGCAATCCTATATAACCGCATCGGAGATATTGGCTTCATTATGGCCATAGCCTGATTCGCTATTAATCTTAACACATGAGAATTTCAACAAATATTTATATCGGATAATAATATTACTATCCTCCCACTTATTGGTCTAATCCTAGCCGCTACAGGTAAATCCGCACAATTTGGCCTTCACCCATGACTCCCCTCAGCAATAGAAGGCCCGACTCCAGTATCCGCTTTACTTCACTCAAGCACAATAGTTGTAGCCGGAGTTTTTCTCCTCATCCGTTTTCACCCTCTATTAGAGAATAATAAAATTGCCCAAACATTAATTCTATGCCTAGGAGCAATCACTACCCTATTTACTGCCCTATGTGCCCTCACACAAAACGATATTAAAAAAATCGTAGCCTTCTCTACTTCAAGCCAACTAGGCTTAATAATAGTTACAATCGGAATTAATCAACCCCACCTGGCATTCCTGCATATCTGTACCCACGCTTTCTTCAAAGCTATACTCTTTTTATGCTCTGGATCAATTATTCATAGCCTTAACGATGAGCAAGACATCCGAAAAATAGGAGGACTATACAAGACCCTCCCCTTTACATCCTCTGCTCTTACTATTGGCAGCCTAGCCCTCACCGGCATACCATTCCTGACAGGCTTCTACTCAAAAGACCTAATTATTGAATCTGCAAACACGTCTTATACCAACGCCTGAGCCCTTATTATTACTCTCATCGCCACCTCTCTCACAGCTGTCTATAGCACACGAATTATCTTTTTCGCCCTCCTAGGACAACCTCGCTACCCCACTCTTATTATTATTAATGAAAATAACCCATCATTAATTAACTCTATTAAACGTCTTGCACTTGGAAGCATTTTTGCAGGCTTCCTTATTACTAATCTAGTTACACCAAATAATATTCCCCAAATAACCATACCTTTATATATAAAATTAACCGCCCTATTTGTTACCATTTTAGGCTTCTCTATTGCTATAGAACTTAACCAACTTAGCTTACACCTAAAAATAAGTACACAATCCAACTCCTTCAACTTTTCAAACATACTAGGATTTTTCCCCGCTACAATACACCGCCTCTTACCCTATATTAACCTCTCAGCAAGTCAAAATGTAGCAACACTACTCTTAGACATAACTTGAACCGAAAAAGCAATCCCAAAAAACATCTCGGATATTCAAATCCTTGCATCAACCTCTGTATCCTCACAAAAAGGCCTCATCAAATTTTACTCCTTGTCTTTCCTAATTTCAATGCTTTTAGCCTTGTTTATCCTAGCCTAA"
nad5_seq_b= "ATTAACCTATTCTCTACCTCAACAGCCGTCTCAATTATTATCCTAGTCCTCCCAATTATAGCCTCATTTACCAACATTTTTAATCACAGTAACTACCCCTATTACGTGAAAACTTCAGTATCCTATGCGTTTATTATCAGTCTCATCCCGACACTAATCTTTATTATTTCAAATCAAGAGACTATAGTATCTAATTGACACTGAATAACAATTCATACCCTAAAACTCACAACTAGCTTCAAACTAGATTACTTTTCTATATTATTCACCCCAATTGCACTCTTTGTAACATGATCAATTATAGAATTTTCTATATGATACATACACTCAGACCCTAAAATCAATCAATTCTTTAAATATTTACTTCTATTTCTAATCACCATACTTATTCTAGTTACTGCTAACAACCTCTTCCAGTTATTCATCGGATGAGAGGGAGTAGGAATTATATCATTTCTCCTAATCGGCTGATGACACGGTCGAACAGATGCCAATACCGCAGCCCTACAGGCAATTCTATACAACCGCATCGGGGACATTGGCTTCATCATGGCCATAGCCTGATTTGCTATTAATCTTAACACATGAGAGTTCCAACAAATATTCATAGCAGATAATAATATTACTATCCTCCCACTAATTGGTCTAATCCTAGCCGCTACGGGTAAATCCGCACAATTTGGCCTCCACCCATGACTACCCTCAGCAATAGAAGGTCCAACTCCAGTATCAGCTTTACTTCACTCAAGCACAATAGTAGTAGCGGGAGTTTTTCTCCTCATCCGCTTTCACCCCTTATTAGAAAACAATAAAACTGCTCAAACATTAATTTTATGCTTAGGAGCAATCACTACCCTATTTACAGCCCTTTGTGCCCTTACACAAAATGATATTAAAAAAATTGTAGCCTTCTCCACTTCAAGCCAATTAGGCTTGATAATAGTTACAATCGGAATTAATCAACCCCACCTGGCCTTTCTTCATATCTGTACTCACGCCTTTTTCAAAGCTATACTCTTCCTATGCTCTGGGTCGATTATTCACAGCCTTAACGATGAACAAGACATCCGGAAGATAGGGGGACTCTACAAAACTCTCCCCTTTACATCTTCTGCTCTTACCATTGGTAGCCTAGCCCTTACTGGTATGCCATTCCTAACTGGATTTTACTCAAAAGACCTAATTATTGAATCTGCAAATACGTCTTATACCAACGCCTGAGCCCTTACTATTACCCTCATTGCCACCTCCCTTACAGCCGTCTATAGCACACGAATTATCTTTTTCGCCCTTTTAGGACAACCCCGTTACCCTACTCTTATTATTATTAATGAAAATAACCCATTATTAATTAACTCTATTAAACGCCTTGCACTCGGAAGCATTTTTGCAGGTTTCCTCATTTCTAATCTTATCTCACCAAATAATATCCCTCAAATAACCATACCCTTATACATAAAAACAACCGCCTTATTTATTACCATTTTAGGCTTCTCAATTGCCATAGAACTAAACCAACTTAGTTTGCACCTAAAAATAAGCACACAATCCAACTCCTTTAACTTCTCAAGTATACTAGGCTTCTTTCCCACTACAATTCACCGCCTCTTGCCTTATGTCAATCTCTCAGTGAGCCAAAATGTAGCTACACTACTCCTAGACATAACCTGAACTGAAAAAGCAATCCCAAAAAACATCTCAGATATTCAGATCCTCGCATCAACCTCTGTATCCTCACAAAAAGGCCTCATCAAATTCTACTCCTTGTCTTTCCTAATTTCCATGCTCCTAGCCCTATTTATCCTAGCCTAG"
nad5_seq_c= "ATTAACCTATTCTCCACTTCAATAGCCGTCTCAATCATTATCCTAGTTCTCCCCATCATAGCCTCATTTACCAACATTTTTAACCACAACAACTACCCCTATTACGTAAAAACTTCAGTATCTTATGCATTTATAATTAGTCTTATTCCTTCACTAATCTTCATTATCTCGAACCAAGAGACAATAATTTCTAATTGACACTGAATAACAATTCATACCCTAAAACTTACAACTAGCTTTAAACTAGATTATTTCTCTATATTATTTACCCCAATCGCACTATTCGTAACATGATCAATTATAGAGTTCTCTATATGGTATATACACTCAGATCCTAAAATCAATCAATTCTTTAAATACCTACTTATATTTCTAATCACCATACTCATTCTAGTCACCGCCAACAACCTCTTTCAATTGTTCATCGGGTGAGAGGGAGTAGGAATTATATCATTTCTTCTTATCGGCTGATGACACGGTCGAACGGATGCTAATACCGCAGCCCTGCAAGCAATTCTATATAACCGCATCGGAGATATTGGCTTCATTATGGCTATAGCTTGATTTGCTATTAATCTTAACACATGAGAATTTCAACAAATATTTATATCAGATAACAACATTACTATTCTTCCACTTATTGGTCTAATCCTAGCTGCTACAGGTAAGTCCGCACAATTTGGTCTTCACCCATGACTCCCCTCAGCAATAGAAGGCCCAACTCCCGTATCCGCTCTACTTCACTCAAGCACAATAGTAGTAGCTGGAGTTTTTCTCCTCATCCGTTTTCACCCTTTATTAGAAAATAACAAAACTGCCCAGACACTAATTTTATGTCTAGGAGCAATTACCACCCTATTTACAGCCCTATGTGCCCTCACACAAAATGATATTAAAAAAATCGTAGCCTTCTCCACTTCAAGCCAACTAGGCTTAATAATAGTCACAATTGGAATTAATCAACCTCACCTAGCATTTCTACATATCTGCACCCATGCTTTTTTCAAAGCTATACTCTTTTTATGCTCCGGATCAATTATTCATAGTCTTAACGACGAACAGGACATCCGAAAAATAGGAGGACTCTACAAAACCCTCCCCTTCACATCCTCAGCTCTTACCATTGGCAGCCTAGCCCTTACTGGTATGCCATTCCTAACAGGATTTTATTCAAAAGACTTAATCATCGAGTCTGCAAATACGTCTTATACCAACGCCTGAGCCCTTATTATTACCCTCATTGCTACCTCCCTTACAGCTGTATATAGTACACGAATTATCTTTTTTGCCCTTCTTGGACAACCTCGCTATCCTACCCTTATTATTATTAATGAAAACAACCCATCATTAATTAACTCTATTAAACGTCTCGCACTTGGAAGTATTTTTGCAGGCTTCCTTATCTCCAATCTTATTTCACCTAATAATGTCCCCCAAATAACTATGCCCTTATATATGAAAATAACCGCCCTATTTGTCACTATTTTAGGCTTTTCTATTGCTATAGAACTTAATCAACTCAGCTTGCACCTAAAAATAAGTACACAATCTAACTCCTTTAACTTCTCAAATATACTAGGATTTTACCCCGCTACAATACACCGCCTCTTACCTTACATTAATCTTTCAGCAAGTCAAAATGTAGCTACACTACTCTTAGATATGACTTGAACCGAAAAAGCAATCCCAAAGAACATCTCAGATATCCAAATCCTCGCATCAACCTCTGTATCCTCACAAAAAGGCCTCATCAAATTTTACTCCCTATCTTTCTTAATCTCCATGCTCTTAGCCCTATTCATCCTAGTCTAA"
print ("NAD5|37.7|38.2|37.0")
#NAD6
nad6_seq_a= "CTAACCCCCACGAGTAATCTCAATAACAATAAAAATACTCACAAACAGAGATCAACCAGCAACTACTATTAATCAACTCCCATAACTGTATAATGCTGCCACTCCTATAGAATCCTCTCGAATTAGACCTACATCATCCCCCTCAAAAATAACCCAATCACCTATATTTTTAAAACTAACTACAACCTCCACCTCATCACTCATCGCTATGAACACTACTAACCCTGCCTCTAACAACATACCCAAAACAAGCATACTAAAAATCATAATGTTTGACCCTCAAGTTTCAGGATACTCCTCAGTTGCCATTGCAGTTGTATACCCAAATACTACTAACATTCCCCCTAAATAAATCAAAAATATTATTAAACCTAAAAATGAACCCCCAAAACTTAAAATAATACCACACCCAACCCCACCACTAACAATTAACCCAAGCCCCCCATAAATTGGAGATGGCTTAGAAGCGAACCCCACAAACCCAACTACAAACATTACACTCAATAAAAATACTGTATATGTCAT"
nad6_seq_b= "CTAGCCCCCTCGAGTAATCTCAATAACAATAAAAATACTCACAAACAGAGACCAGCCAGCAACTACTATTAGCCAACTTCCATAACTATATAATGCTGCCACCCCTATAGAATCTTCTCGAATTAGGCCCACTTCATCTCCTTCAAAAACTACCCAATCACCCATGTTTTTAAAATTAACTACAACCTCTACCTCATCACTCATCACCATAAACATTACTAAACCTGCCTCCAATACTACGCCTAAAACAAACATGCTAAAAATTATAATATTTGAGCCTCAAGTTTCAGGATACTCCTCAGTTGCTATCGCAGTAGTATACCCAAATACTACCAATATACCCCCCAAATAAATCAAAAACATTATTAAGCCTAAAAACGAACCACCAAAACTCAAAATAATTCCACAGCCAACTCCACCACTAACAATCAACCCAAGCCCCCCATAAATAGGAGATGGTTTAGAAGCAAATCCCACAAAACCAATTACAAATATTACACTTAATAAAAATACTATATATATCAT"
nad6_seq_c= "CTAACCCCCACGAGTAATCTCAATGACAATAAAAATACTCACAAATAAAGATCAACCAGCAACCACTATTAATCAACTCCCATAACTATATAATGCTGCCACCCCTATAGAGTCCTCTCGAATTAAACCTACTTCGTCCCCTTCAAAAACAACCCAATCACCTATATTCTTAAAACTCACCACAACCTCAACCTCATCACTCACCGCCATAAATATAACTAATCCTGCCTCCAACAACACACCCAAAACAAGCATACTAAGAATTATAATATTTGACCCTCAAGTTTCAGGGTATTCCTCAGTTGCTATCGCAGTTGTATACCCAAATACTACCAATATTCCACCTAAATAAATTAAAAACATTATTAAGCCTAAAAACGACCCACCAAAACTTAAAATAATACCACAACCAACCCCACCACTAACAATTAACCCAAGCCCTCCATAAATTGGAGATGGCTTAGAAGCGAACCCCACAAAACCAATTACAAACATTACACTCAATAAAAATACTATATATGTCAT"
print ("NAD6|37.1|36.2|36.8")

#######ATP6#######
def sequence_compare(atp6_seq_a, atp6_seq_b, atp6_seq_c):  
    atp6_len1= len(atp6_seq_a)
    atp6_len2= len(atp6_seq_b)
    atp6_len3= len(atp6_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    atp6_seq_b_AtoT_TtoA = 0
    atp6_seq_b_AtoC_TtoG = 0
    atp6_seq_b_TtoC_AtoG = 0
    atp6_seq_b_CtoG_GtoC = 0
    atp6_seq_b_CtoA_GtoT = 0
    atp6_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    atp6_seq_c_AtoT_TtoA = 0
    atp6_seq_c_AtoC_TtoG = 0
    atp6_seq_c_TtoC_AtoG = 0
    atp6_seq_c_CtoG_GtoC = 0
    atp6_seq_c_CtoA_GtoT = 0
    atp6_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(atp6_len1,atp6_len2,atp6_len3)): 
        if atp6_seq_a[pos] != atp6_seq_b[pos] and atp6_seq_a[pos] == atp6_seq_c[pos] and atp6_seq_a[pos] != "-" and atp6_seq_b[pos] != "-" and atp6_seq_c[pos] != "-" :
            mismatches.append('|')
            if atp6_seq_a[pos] == 'A' and atp6_seq_b[pos] == 'T' or atp6_seq_a[pos] == 'T' and atp6_seq_b[pos] == 'A':
                    atp6_seq_b_AtoT_TtoA += 1
            if atp6_seq_a[pos] == 'A' and atp6_seq_b[pos] == 'C' or atp6_seq_a[pos] == 'T' and atp6_seq_b[pos] == 'G':
                    atp6_seq_b_AtoC_TtoG += 1
            if atp6_seq_a[pos] == 'T' and atp6_seq_b[pos] == 'C' or atp6_seq_a[pos] == 'A' and atp6_seq_b[pos] == 'G':
                    atp6_seq_b_TtoC_AtoG += 1
            if atp6_seq_a[pos] == 'C' and atp6_seq_b[pos] == 'G' or atp6_seq_a[pos] == 'G' and atp6_seq_b[pos] == 'C':
                    atp6_seq_b_CtoG_GtoC += 1
            if atp6_seq_a[pos] == 'C' and atp6_seq_b[pos] == 'A' or atp6_seq_a[pos] == 'G' and atp6_seq_b[pos] == 'T':
                    atp6_seq_b_CtoA_GtoT += 1
            elif atp6_seq_a[pos] == 'G' and atp6_seq_b[pos] == 'A' or atp6_seq_a[pos] == 'C' and atp6_seq_b[pos] == 'T':
                    atp6_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(atp6_len1,atp6_len2,atp6_len3)):  
        if atp6_seq_a[pos] != atp6_seq_c[pos] and atp6_seq_a[pos] == atp6_seq_b[pos] and atp6_seq_a[pos] != "-" and atp6_seq_b[pos] != "-" and atp6_seq_c[pos] != "-" :
            mismatches.append('|')
            if atp6_seq_a[pos] == 'A' and atp6_seq_c[pos] == 'T' or atp6_seq_a[pos] == 'T' and atp6_seq_c[pos] == 'A':
                    atp6_seq_c_AtoT_TtoA += 1
            if atp6_seq_a[pos] == 'A' and atp6_seq_c[pos] == 'C' or atp6_seq_a[pos] == 'T' and atp6_seq_c[pos] == 'G':
                    atp6_seq_c_AtoC_TtoG += 1
            if atp6_seq_a[pos] == 'T' and atp6_seq_c[pos] == 'C' or atp6_seq_a[pos] == 'A' and atp6_seq_c[pos] == 'G':
                    atp6_seq_c_TtoC_AtoG += 1
            if atp6_seq_a[pos] == 'C' and atp6_seq_c[pos] == 'G' or atp6_seq_a[pos] == 'G' and atp6_seq_c[pos] == 'C':
                    atp6_seq_c_CtoG_GtoC += 1
            if atp6_seq_a[pos] == 'C' and atp6_seq_c[pos] == 'A' or atp6_seq_a[pos] == 'G' and atp6_seq_c[pos] == 'T':
                    atp6_seq_c_CtoA_GtoT += 1
            elif atp6_seq_a[pos] == 'G' and atp6_seq_c[pos] == 'A' or atp6_seq_a[pos] == 'C' and atp6_seq_c[pos] == 'T':
                    atp6_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('ATP6')
    print('Sequence B A:T-->T:A:', atp6_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', atp6_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', atp6_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', atp6_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', atp6_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', atp6_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', atp6_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', atp6_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', atp6_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', atp6_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', atp6_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', atp6_seq_c_GtoA_CtoT)
    
sequence_compare (atp6_seq_a, atp6_seq_b, atp6_seq_c)

#######ATP8#######
def sequence_compare(atp8_seq_a, atp8_seq_b, atp8_seq_c):  
    atp8_len1= len(atp8_seq_a)
    atp8_len2= len(atp8_seq_b)
    atp8_len3= len(atp8_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    atp8_seq_b_AtoT_TtoA = 0
    atp8_seq_b_AtoC_TtoG = 0
    atp8_seq_b_TtoC_AtoG = 0
    atp8_seq_b_CtoG_GtoC = 0
    atp8_seq_b_CtoA_GtoT = 0
    atp8_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    atp8_seq_c_AtoT_TtoA = 0
    atp8_seq_c_AtoC_TtoG = 0
    atp8_seq_c_TtoC_AtoG = 0
    atp8_seq_c_CtoG_GtoC = 0
    atp8_seq_c_CtoA_GtoT = 0
    atp8_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(atp8_len1,atp8_len2,atp8_len3)): 
        if atp8_seq_a[pos] != atp8_seq_b[pos] and atp8_seq_a[pos] == atp8_seq_c[pos] and atp8_seq_a[pos] != "-" and atp8_seq_b[pos] != "-" and atp8_seq_c[pos] != "-" :
            mismatches.append('|')
            if atp8_seq_a[pos] == 'A' and atp8_seq_b[pos] == 'T' or atp8_seq_a[pos] == 'T' and atp8_seq_b[pos] == 'A':
                    atp8_seq_b_AtoT_TtoA += 1
            if atp8_seq_a[pos] == 'A' and atp8_seq_b[pos] == 'C' or atp8_seq_a[pos] == 'T' and atp8_seq_b[pos] == 'G':
                    atp8_seq_b_AtoC_TtoG += 1
            if atp8_seq_a[pos] == 'T' and atp8_seq_b[pos] == 'C' or atp8_seq_a[pos] == 'A' and atp8_seq_b[pos] == 'G':
                    atp8_seq_b_TtoC_AtoG += 1
            if atp8_seq_a[pos] == 'C' and atp8_seq_b[pos] == 'G' or atp8_seq_a[pos] == 'G' and atp8_seq_b[pos] == 'C':
                    atp8_seq_b_CtoG_GtoC += 1
            if atp8_seq_a[pos] == 'C' and atp8_seq_b[pos] == 'A' or atp8_seq_a[pos] == 'G' and atp8_seq_b[pos] == 'T':
                    atp8_seq_b_CtoA_GtoT += 1
            elif atp8_seq_a[pos] == 'G' and atp8_seq_b[pos] == 'A' or atp8_seq_a[pos] == 'C' and atp8_seq_b[pos] == 'T':
                    atp8_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(atp8_len1,atp8_len2,atp8_len3)):  
        if atp8_seq_a[pos] != atp8_seq_c[pos] and atp8_seq_a[pos] == atp8_seq_b[pos] and atp8_seq_a[pos] != "-" and atp8_seq_b[pos] != "-" and atp8_seq_c[pos] != "-" :
            mismatches.append('|')
            if atp8_seq_a[pos] == 'A' and atp8_seq_c[pos] == 'T' or atp8_seq_a[pos] == 'T' and atp8_seq_c[pos] == 'A':
                    atp8_seq_c_AtoT_TtoA += 1
            if atp8_seq_a[pos] == 'A' and atp8_seq_c[pos] == 'C' or atp8_seq_a[pos] == 'T' and atp8_seq_c[pos] == 'G':
                    atp8_seq_c_AtoC_TtoG += 1
            if atp8_seq_a[pos] == 'T' and atp8_seq_c[pos] == 'C' or atp8_seq_a[pos] == 'A' and atp8_seq_c[pos] == 'G':
                    atp8_seq_c_TtoC_AtoG += 1
            if atp8_seq_a[pos] == 'C' and atp8_seq_c[pos] == 'G' or atp8_seq_a[pos] == 'G' and atp8_seq_c[pos] == 'C':
                    atp8_seq_c_CtoG_GtoC += 1
            if atp8_seq_a[pos] == 'C' and atp8_seq_c[pos] == 'A' or atp8_seq_a[pos] == 'G' and atp8_seq_c[pos] == 'T':
                    atp8_seq_c_CtoA_GtoT += 1
            elif atp8_seq_a[pos] == 'G' and atp8_seq_c[pos] == 'A' or atp8_seq_a[pos] == 'C' and atp8_seq_c[pos] == 'T':
                    atp8_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('ATP8')
    print('Sequence B A:T-->T:A:', atp8_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', atp8_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', atp8_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', atp8_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', atp8_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', atp8_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', atp8_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', atp8_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', atp8_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', atp8_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', atp8_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', atp8_seq_c_GtoA_CtoT)
    
sequence_compare (atp8_seq_a, atp8_seq_b, atp8_seq_c)

#######COX1#######
def sequence_compare(cox1_seq_a, cox1_seq_b, cox1_seq_c):  
    cox1_len1= len(cox1_seq_a)
    cox1_len2= len(cox1_seq_b)
    cox1_len3= len(cox1_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    cox1_seq_b_AtoT_TtoA = 0
    cox1_seq_b_AtoC_TtoG = 0
    cox1_seq_b_TtoC_AtoG = 0
    cox1_seq_b_CtoG_GtoC = 0
    cox1_seq_b_CtoA_GtoT = 0
    cox1_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    cox1_seq_c_AtoT_TtoA = 0
    cox1_seq_c_AtoC_TtoG = 0
    cox1_seq_c_TtoC_AtoG = 0
    cox1_seq_c_CtoG_GtoC = 0
    cox1_seq_c_CtoA_GtoT = 0
    cox1_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(cox1_len1,cox1_len2,cox1_len3)): 
        if cox1_seq_a[pos] != cox1_seq_b[pos] and cox1_seq_a[pos] == cox1_seq_c[pos] and cox1_seq_a[pos] != "-" and cox1_seq_b[pos] != "-" and cox1_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox1_seq_a[pos] == 'A' and cox1_seq_b[pos] == 'T' or cox1_seq_a[pos] == 'T' and cox1_seq_b[pos] == 'A':
                    cox1_seq_b_AtoT_TtoA += 1
            if cox1_seq_a[pos] == 'A' and cox1_seq_b[pos] == 'C' or cox1_seq_a[pos] == 'T' and cox1_seq_b[pos] == 'G':
                    cox1_seq_b_AtoC_TtoG += 1
            if cox1_seq_a[pos] == 'T' and cox1_seq_b[pos] == 'C' or cox1_seq_a[pos] == 'A' and cox1_seq_b[pos] == 'G':
                    cox1_seq_b_TtoC_AtoG += 1
            if cox1_seq_a[pos] == 'C' and cox1_seq_b[pos] == 'G' or cox1_seq_a[pos] == 'G' and cox1_seq_b[pos] == 'C':
                    cox1_seq_b_CtoG_GtoC += 1
            if cox1_seq_a[pos] == 'C' and cox1_seq_b[pos] == 'A' or cox1_seq_a[pos] == 'G' and cox1_seq_b[pos] == 'T':
                    cox1_seq_b_CtoA_GtoT += 1
            elif cox1_seq_a[pos] == 'G' and cox1_seq_b[pos] == 'A' or cox1_seq_a[pos] == 'C' and cox1_seq_b[pos] == 'T':
                    cox1_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(cox1_len1,cox1_len2,cox1_len3)):  
        if cox1_seq_a[pos] != cox1_seq_c[pos] and cox1_seq_a[pos] == cox1_seq_b[pos] and cox1_seq_a[pos] != "-" and cox1_seq_b[pos] != "-" and cox1_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox1_seq_a[pos] == 'A' and cox1_seq_c[pos] == 'T' or cox1_seq_a[pos] == 'T' and cox1_seq_c[pos] == 'A':
                    cox1_seq_c_AtoT_TtoA += 1
            if cox1_seq_a[pos] == 'A' and cox1_seq_c[pos] == 'C' or cox1_seq_a[pos] == 'T' and cox1_seq_c[pos] == 'G':
                    cox1_seq_c_AtoC_TtoG += 1
            if cox1_seq_a[pos] == 'T' and cox1_seq_c[pos] == 'C' or cox1_seq_a[pos] == 'A' and cox1_seq_c[pos] == 'G':
                    cox1_seq_c_TtoC_AtoG += 1
            if cox1_seq_a[pos] == 'C' and cox1_seq_c[pos] == 'G' or cox1_seq_a[pos] == 'G' and cox1_seq_c[pos] == 'C':
                    cox1_seq_c_CtoG_GtoC += 1
            if cox1_seq_a[pos] == 'C' and cox1_seq_c[pos] == 'A' or cox1_seq_a[pos] == 'G' and cox1_seq_c[pos] == 'T':
                    cox1_seq_c_CtoA_GtoT += 1
            elif cox1_seq_a[pos] == 'G' and cox1_seq_c[pos] == 'A' or cox1_seq_a[pos] == 'C' and cox1_seq_c[pos] == 'T':
                    cox1_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('COX1')
    print('Sequence B A:T-->T:A:', cox1_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', cox1_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', cox1_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', cox1_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', cox1_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', cox1_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', cox1_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', cox1_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', cox1_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', cox1_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', cox1_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', cox1_seq_c_GtoA_CtoT)
    
sequence_compare (cox1_seq_a, cox1_seq_b, cox1_seq_c)

#######COX2#######
def sequence_compare(cox2_seq_a, cox2_seq_b, cox2_seq_c):  
    cox2_len1= len(cox2_seq_a)
    cox2_len2= len(cox2_seq_b)
    cox2_len3= len(cox2_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    cox2_seq_b_AtoT_TtoA = 0
    cox2_seq_b_AtoC_TtoG = 0
    cox2_seq_b_TtoC_AtoG = 0
    cox2_seq_b_CtoG_GtoC = 0
    cox2_seq_b_CtoA_GtoT = 0
    cox2_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    cox2_seq_c_AtoT_TtoA = 0
    cox2_seq_c_AtoC_TtoG = 0
    cox2_seq_c_TtoC_AtoG = 0
    cox2_seq_c_CtoG_GtoC = 0
    cox2_seq_c_CtoA_GtoT = 0
    cox2_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(cox2_len1,cox2_len2,cox2_len3)): 
        if cox2_seq_a[pos] != cox2_seq_b[pos] and cox2_seq_a[pos] == cox2_seq_c[pos] and cox2_seq_a[pos] != "-" and cox2_seq_b[pos] != "-" and cox2_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox2_seq_a[pos] == 'A' and cox2_seq_b[pos] == 'T' or cox2_seq_a[pos] == 'T' and cox2_seq_b[pos] == 'A':
                    cox2_seq_b_AtoT_TtoA += 1
            if cox2_seq_a[pos] == 'A' and cox2_seq_b[pos] == 'C' or cox2_seq_a[pos] == 'T' and cox2_seq_b[pos] == 'G':
                    cox2_seq_b_AtoC_TtoG += 1
            if cox2_seq_a[pos] == 'T' and cox2_seq_b[pos] == 'C' or cox2_seq_a[pos] == 'A' and cox2_seq_b[pos] == 'G':
                    cox2_seq_b_TtoC_AtoG += 1
            if cox2_seq_a[pos] == 'C' and cox2_seq_b[pos] == 'G' or cox2_seq_a[pos] == 'G' and cox2_seq_b[pos] == 'C':
                    cox2_seq_b_CtoG_GtoC += 1
            if cox2_seq_a[pos] == 'C' and cox2_seq_b[pos] == 'A' or cox2_seq_a[pos] == 'G' and cox2_seq_b[pos] == 'T':
                    cox2_seq_b_CtoA_GtoT += 1
            elif cox2_seq_a[pos] == 'G' and cox2_seq_b[pos] == 'A' or cox2_seq_a[pos] == 'C' and cox2_seq_b[pos] == 'T':
                    cox2_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(cox2_len1,cox2_len2,cox2_len3)):  
        if cox2_seq_a[pos] != cox2_seq_c[pos] and cox2_seq_a[pos] == cox2_seq_b[pos] and cox2_seq_a[pos] != "-" and cox2_seq_b[pos] != "-" and cox2_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox2_seq_a[pos] == 'A' and cox2_seq_c[pos] == 'T' or cox2_seq_a[pos] == 'T' and cox2_seq_c[pos] == 'A':
                    cox2_seq_c_AtoT_TtoA += 1
            if cox2_seq_a[pos] == 'A' and cox2_seq_c[pos] == 'C' or cox2_seq_a[pos] == 'T' and cox2_seq_c[pos] == 'G':
                    cox2_seq_c_AtoC_TtoG += 1
            if cox2_seq_a[pos] == 'T' and cox2_seq_c[pos] == 'C' or cox2_seq_a[pos] == 'A' and cox2_seq_c[pos] == 'G':
                    cox2_seq_c_TtoC_AtoG += 1
            if cox2_seq_a[pos] == 'C' and cox2_seq_c[pos] == 'G' or cox2_seq_a[pos] == 'G' and cox2_seq_c[pos] == 'C':
                    cox2_seq_c_CtoG_GtoC += 1
            if cox2_seq_a[pos] == 'C' and cox2_seq_c[pos] == 'A' or cox2_seq_a[pos] == 'G' and cox2_seq_c[pos] == 'T':
                    cox2_seq_c_CtoA_GtoT += 1
            elif cox2_seq_a[pos] == 'G' and cox2_seq_c[pos] == 'A' or cox2_seq_a[pos] == 'C' and cox2_seq_c[pos] == 'T':
                    cox2_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('COX2')
    print('Sequence B A:T-->T:A:', cox2_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', cox2_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', cox2_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', cox2_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', cox2_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', cox2_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', cox2_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', cox2_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', cox2_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', cox2_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', cox2_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', cox2_seq_c_GtoA_CtoT)
    
sequence_compare (cox2_seq_a, cox2_seq_b, cox2_seq_c)

#######COX3#######
def sequence_compare(cox3_seq_a, cox3_seq_b, cox3_seq_c):  
    cox3_len1= len(cox3_seq_a)
    cox3_len2= len(cox3_seq_b)
    cox3_len3= len(cox3_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    cox3_seq_b_AtoT_TtoA = 0
    cox3_seq_b_AtoC_TtoG = 0
    cox3_seq_b_TtoC_AtoG = 0
    cox3_seq_b_CtoG_GtoC = 0
    cox3_seq_b_CtoA_GtoT = 0
    cox3_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    cox3_seq_c_AtoT_TtoA = 0
    cox3_seq_c_AtoC_TtoG = 0
    cox3_seq_c_TtoC_AtoG = 0
    cox3_seq_c_CtoG_GtoC = 0
    cox3_seq_c_CtoA_GtoT = 0
    cox3_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(cox3_len1,cox3_len2,cox3_len3)): 
        if cox3_seq_a[pos] != cox3_seq_b[pos] and cox3_seq_a[pos] == cox3_seq_c[pos] and cox3_seq_a[pos] != "-" and cox3_seq_b[pos] != "-" and cox3_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox3_seq_a[pos] == 'A' and cox3_seq_b[pos] == 'T' or cox3_seq_a[pos] == 'T' and cox3_seq_b[pos] == 'A':
                    cox3_seq_b_AtoT_TtoA += 1
            if cox3_seq_a[pos] == 'A' and cox3_seq_b[pos] == 'C' or cox3_seq_a[pos] == 'T' and cox3_seq_b[pos] == 'G':
                    cox3_seq_b_AtoC_TtoG += 1
            if cox3_seq_a[pos] == 'T' and cox3_seq_b[pos] == 'C' or cox3_seq_a[pos] == 'A' and cox3_seq_b[pos] == 'G':
                    cox3_seq_b_TtoC_AtoG += 1
            if cox3_seq_a[pos] == 'C' and cox3_seq_b[pos] == 'G' or cox3_seq_a[pos] == 'G' and cox3_seq_b[pos] == 'C':
                    cox3_seq_b_CtoG_GtoC += 1
            if cox3_seq_a[pos] == 'C' and cox3_seq_b[pos] == 'A' or cox3_seq_a[pos] == 'G' and cox3_seq_b[pos] == 'T':
                    cox3_seq_b_CtoA_GtoT += 1
            elif cox3_seq_a[pos] == 'G' and cox3_seq_b[pos] == 'A' or cox3_seq_a[pos] == 'C' and cox3_seq_b[pos] == 'T':
                    cox3_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(cox3_len1,cox3_len2,cox3_len3)):  
        if cox3_seq_a[pos] != cox3_seq_c[pos] and cox3_seq_a[pos] == cox3_seq_b[pos] and cox3_seq_a[pos] != "-" and cox3_seq_b[pos] != "-" and cox3_seq_c[pos] != "-" :
            mismatches.append('|')
            if cox3_seq_a[pos] == 'A' and cox3_seq_c[pos] == 'T' or cox3_seq_a[pos] == 'T' and cox3_seq_c[pos] == 'A':
                    cox3_seq_c_AtoT_TtoA += 1
            if cox3_seq_a[pos] == 'A' and cox3_seq_c[pos] == 'C' or cox3_seq_a[pos] == 'T' and cox3_seq_c[pos] == 'G':
                    cox3_seq_c_AtoC_TtoG += 1
            if cox3_seq_a[pos] == 'T' and cox3_seq_c[pos] == 'C' or cox3_seq_a[pos] == 'A' and cox3_seq_c[pos] == 'G':
                    cox3_seq_c_TtoC_AtoG += 1
            if cox3_seq_a[pos] == 'C' and cox3_seq_c[pos] == 'G' or cox3_seq_a[pos] == 'G' and cox3_seq_c[pos] == 'C':
                    cox3_seq_c_CtoG_GtoC += 1
            if cox3_seq_a[pos] == 'C' and cox3_seq_c[pos] == 'A' or cox3_seq_a[pos] == 'G' and cox3_seq_c[pos] == 'T':
                    cox3_seq_c_CtoA_GtoT += 1
            elif cox3_seq_a[pos] == 'G' and cox3_seq_c[pos] == 'A' or cox3_seq_a[pos] == 'C' and cox3_seq_c[pos] == 'T':
                    cox3_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('COX3')
    print('Sequence B A:T-->T:A:', cox3_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', cox3_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', cox3_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', cox3_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', cox3_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', cox3_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', cox3_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', cox3_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', cox3_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', cox3_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', cox3_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', cox3_seq_c_GtoA_CtoT)
    
sequence_compare (cox3_seq_a, cox3_seq_b, cox3_seq_c)

#######CYTB#######
def sequence_compare(cytb_seq_a, cytb_seq_b, cytb_seq_c):  
    cytb_len1= len(cytb_seq_a)
    cytb_len2= len(cytb_seq_b)
    cytb_len3= len(cytb_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    cytb_seq_b_AtoT_TtoA = 0
    cytb_seq_b_AtoC_TtoG = 0
    cytb_seq_b_TtoC_AtoG = 0
    cytb_seq_b_CtoG_GtoC = 0
    cytb_seq_b_CtoA_GtoT = 0
    cytb_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    cytb_seq_c_AtoT_TtoA = 0
    cytb_seq_c_AtoC_TtoG = 0
    cytb_seq_c_TtoC_AtoG = 0
    cytb_seq_c_CtoG_GtoC = 0
    cytb_seq_c_CtoA_GtoT = 0
    cytb_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(cytb_len1,cytb_len2,cytb_len3)): 
        if cytb_seq_a[pos] != cytb_seq_b[pos] and cytb_seq_a[pos] == cytb_seq_c[pos] and cytb_seq_a[pos] != "-" and cytb_seq_b[pos] != "-" and cytb_seq_c[pos] != "-" :
            mismatches.append('|')
            if cytb_seq_a[pos] == 'A' and cytb_seq_b[pos] == 'T' or cytb_seq_a[pos] == 'T' and cytb_seq_b[pos] == 'A':
                    cytb_seq_b_AtoT_TtoA += 1
            if cytb_seq_a[pos] == 'A' and cytb_seq_b[pos] == 'C' or cytb_seq_a[pos] == 'T' and cytb_seq_b[pos] == 'G':
                    cytb_seq_b_AtoC_TtoG += 1
            if cytb_seq_a[pos] == 'T' and cytb_seq_b[pos] == 'C' or cytb_seq_a[pos] == 'A' and cytb_seq_b[pos] == 'G':
                    cytb_seq_b_TtoC_AtoG += 1
            if cytb_seq_a[pos] == 'C' and cytb_seq_b[pos] == 'G' or cytb_seq_a[pos] == 'G' and cytb_seq_b[pos] == 'C':
                    cytb_seq_b_CtoG_GtoC += 1
            if cytb_seq_a[pos] == 'C' and cytb_seq_b[pos] == 'A' or cytb_seq_a[pos] == 'G' and cytb_seq_b[pos] == 'T':
                    cytb_seq_b_CtoA_GtoT += 1
            elif cytb_seq_a[pos] == 'G' and cytb_seq_b[pos] == 'A' or cytb_seq_a[pos] == 'C' and cytb_seq_b[pos] == 'T':
                    cytb_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(cytb_len1,cytb_len2,cytb_len3)):  
        if cytb_seq_a[pos] != cytb_seq_c[pos] and cytb_seq_a[pos] == cytb_seq_b[pos] and cytb_seq_a[pos] != "-" and cytb_seq_b[pos] != "-" and cytb_seq_c[pos] != "-" :
            mismatches.append('|')
            if cytb_seq_a[pos] == 'A' and cytb_seq_c[pos] == 'T' or cytb_seq_a[pos] == 'T' and cytb_seq_c[pos] == 'A':
                    cytb_seq_c_AtoT_TtoA += 1
            if cytb_seq_a[pos] == 'A' and cytb_seq_c[pos] == 'C' or cytb_seq_a[pos] == 'T' and cytb_seq_c[pos] == 'G':
                    cytb_seq_c_AtoC_TtoG += 1
            if cytb_seq_a[pos] == 'T' and cytb_seq_c[pos] == 'C' or cytb_seq_a[pos] == 'A' and cytb_seq_c[pos] == 'G':
                    cytb_seq_c_TtoC_AtoG += 1
            if cytb_seq_a[pos] == 'C' and cytb_seq_c[pos] == 'G' or cytb_seq_a[pos] == 'G' and cytb_seq_c[pos] == 'C':
                    cytb_seq_c_CtoG_GtoC += 1
            if cytb_seq_a[pos] == 'C' and cytb_seq_c[pos] == 'A' or cytb_seq_a[pos] == 'G' and cytb_seq_c[pos] == 'T':
                    cytb_seq_c_CtoA_GtoT += 1
            elif cytb_seq_a[pos] == 'G' and cytb_seq_c[pos] == 'A' or cytb_seq_a[pos] == 'C' and cytb_seq_c[pos] == 'T':
                    cytb_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('CYTB')
    print('Sequence B A:T-->T:A:', cytb_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', cytb_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', cytb_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', cytb_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', cytb_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', cytb_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', cytb_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', cytb_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', cytb_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', cytb_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', cytb_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', cytb_seq_c_GtoA_CtoT)
    
sequence_compare (cytb_seq_a, cytb_seq_b, cytb_seq_c)

#######NAD1#######
def sequence_compare(nad1_seq_a, nad1_seq_b, nad1_seq_c):  
    nad1_len1= len(nad1_seq_a)
    nad1_len2= len(nad1_seq_b)
    nad1_len3= len(nad1_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad1_seq_b_AtoT_TtoA = 0
    nad1_seq_b_AtoC_TtoG = 0
    nad1_seq_b_TtoC_AtoG = 0
    nad1_seq_b_CtoG_GtoC = 0
    nad1_seq_b_CtoA_GtoT = 0
    nad1_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad1_seq_c_AtoT_TtoA = 0
    nad1_seq_c_AtoC_TtoG = 0
    nad1_seq_c_TtoC_AtoG = 0
    nad1_seq_c_CtoG_GtoC = 0
    nad1_seq_c_CtoA_GtoT = 0
    nad1_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad1_len1,nad1_len2,nad1_len3)): 
        if nad1_seq_a[pos] != nad1_seq_b[pos] and nad1_seq_a[pos] == nad1_seq_c[pos] and nad1_seq_a[pos] != "-" and nad1_seq_b[pos] != "-" and nad1_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad1_seq_a[pos] == 'A' and nad1_seq_b[pos] == 'T' or nad1_seq_a[pos] == 'T' and nad1_seq_b[pos] == 'A':
                    nad1_seq_b_AtoT_TtoA += 1
            if nad1_seq_a[pos] == 'A' and nad1_seq_b[pos] == 'C' or nad1_seq_a[pos] == 'T' and nad1_seq_b[pos] == 'G':
                    nad1_seq_b_AtoC_TtoG += 1
            if nad1_seq_a[pos] == 'T' and nad1_seq_b[pos] == 'C' or nad1_seq_a[pos] == 'A' and nad1_seq_b[pos] == 'G':
                    nad1_seq_b_TtoC_AtoG += 1
            if nad1_seq_a[pos] == 'C' and nad1_seq_b[pos] == 'G' or nad1_seq_a[pos] == 'G' and nad1_seq_b[pos] == 'C':
                    nad1_seq_b_CtoG_GtoC += 1
            if nad1_seq_a[pos] == 'C' and nad1_seq_b[pos] == 'A' or nad1_seq_a[pos] == 'G' and nad1_seq_b[pos] == 'T':
                    nad1_seq_b_CtoA_GtoT += 1
            elif nad1_seq_a[pos] == 'G' and nad1_seq_b[pos] == 'A' or nad1_seq_a[pos] == 'C' and nad1_seq_b[pos] == 'T':
                    nad1_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad1_len1,nad1_len2,nad1_len3)):  
        if nad1_seq_a[pos] != nad1_seq_c[pos] and nad1_seq_a[pos] == nad1_seq_b[pos] and nad1_seq_a[pos] != "-" and nad1_seq_b[pos] != "-" and nad1_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad1_seq_a[pos] == 'A' and nad1_seq_c[pos] == 'T' or nad1_seq_a[pos] == 'T' and nad1_seq_c[pos] == 'A':
                    nad1_seq_c_AtoT_TtoA += 1
            if nad1_seq_a[pos] == 'A' and nad1_seq_c[pos] == 'C' or nad1_seq_a[pos] == 'T' and nad1_seq_c[pos] == 'G':
                    nad1_seq_c_AtoC_TtoG += 1
            if nad1_seq_a[pos] == 'T' and nad1_seq_c[pos] == 'C' or nad1_seq_a[pos] == 'A' and nad1_seq_c[pos] == 'G':
                    nad1_seq_c_TtoC_AtoG += 1
            if nad1_seq_a[pos] == 'C' and nad1_seq_c[pos] == 'G' or nad1_seq_a[pos] == 'G' and nad1_seq_c[pos] == 'C':
                    nad1_seq_c_CtoG_GtoC += 1
            if nad1_seq_a[pos] == 'C' and nad1_seq_c[pos] == 'A' or nad1_seq_a[pos] == 'G' and nad1_seq_c[pos] == 'T':
                    nad1_seq_c_CtoA_GtoT += 1
            elif nad1_seq_a[pos] == 'G' and nad1_seq_c[pos] == 'A' or nad1_seq_a[pos] == 'C' and nad1_seq_c[pos] == 'T':
                    nad1_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD1')
    print('Sequence B A:T-->T:A:', nad1_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad1_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad1_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad1_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad1_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad1_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad1_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad1_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad1_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad1_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad1_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad1_seq_c_GtoA_CtoT)
    
sequence_compare (nad1_seq_a, nad1_seq_b, nad1_seq_c)

#######NAD2#######
def sequence_compare(nad2_seq_a, nad2_seq_b, nad2_seq_c):  
    nad2_len1= len(nad2_seq_a)
    nad2_len2= len(nad2_seq_b)
    nad2_len3= len(nad2_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad2_seq_b_AtoT_TtoA = 0
    nad2_seq_b_AtoC_TtoG = 0
    nad2_seq_b_TtoC_AtoG = 0
    nad2_seq_b_CtoG_GtoC = 0
    nad2_seq_b_CtoA_GtoT = 0
    nad2_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad2_seq_c_AtoT_TtoA = 0
    nad2_seq_c_AtoC_TtoG = 0
    nad2_seq_c_TtoC_AtoG = 0
    nad2_seq_c_CtoG_GtoC = 0
    nad2_seq_c_CtoA_GtoT = 0
    nad2_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad2_len1,nad2_len2,nad2_len3)): 
        if nad2_seq_a[pos] != nad2_seq_b[pos] and nad2_seq_a[pos] == nad2_seq_c[pos] and nad2_seq_a[pos] != "-" and nad2_seq_b[pos] != "-" and nad2_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad2_seq_a[pos] == 'A' and nad2_seq_b[pos] == 'T' or nad2_seq_a[pos] == 'T' and nad2_seq_b[pos] == 'A':
                    nad2_seq_b_AtoT_TtoA += 1
            if nad2_seq_a[pos] == 'A' and nad2_seq_b[pos] == 'C' or nad2_seq_a[pos] == 'T' and nad2_seq_b[pos] == 'G':
                    nad2_seq_b_AtoC_TtoG += 1
            if nad2_seq_a[pos] == 'T' and nad2_seq_b[pos] == 'C' or nad2_seq_a[pos] == 'A' and nad2_seq_b[pos] == 'G':
                    nad2_seq_b_TtoC_AtoG += 1
            if nad2_seq_a[pos] == 'C' and nad2_seq_b[pos] == 'G' or nad2_seq_a[pos] == 'G' and nad2_seq_b[pos] == 'C':
                    nad2_seq_b_CtoG_GtoC += 1
            if nad2_seq_a[pos] == 'C' and nad2_seq_b[pos] == 'A' or nad2_seq_a[pos] == 'G' and nad2_seq_b[pos] == 'T':
                    nad2_seq_b_CtoA_GtoT += 1
            elif nad2_seq_a[pos] == 'G' and nad2_seq_b[pos] == 'A' or nad2_seq_a[pos] == 'C' and nad2_seq_b[pos] == 'T':
                    nad2_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad2_len1,nad2_len2,nad2_len3)):  
        if nad2_seq_a[pos] != nad2_seq_c[pos] and nad2_seq_a[pos] == nad2_seq_b[pos] and nad2_seq_a[pos] != "-" and nad2_seq_b[pos] != "-" and nad2_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad2_seq_a[pos] == 'A' and nad2_seq_c[pos] == 'T' or nad2_seq_a[pos] == 'T' and nad2_seq_c[pos] == 'A':
                    nad2_seq_c_AtoT_TtoA += 1
            if nad2_seq_a[pos] == 'A' and nad2_seq_c[pos] == 'C' or nad2_seq_a[pos] == 'T' and nad2_seq_c[pos] == 'G':
                    nad2_seq_c_AtoC_TtoG += 1
            if nad2_seq_a[pos] == 'T' and nad2_seq_c[pos] == 'C' or nad2_seq_a[pos] == 'A' and nad2_seq_c[pos] == 'G':
                    nad2_seq_c_TtoC_AtoG += 1
            if nad2_seq_a[pos] == 'C' and nad2_seq_c[pos] == 'G' or nad2_seq_a[pos] == 'G' and nad2_seq_c[pos] == 'C':
                    nad2_seq_c_CtoG_GtoC += 1
            if nad2_seq_a[pos] == 'C' and nad2_seq_c[pos] == 'A' or nad2_seq_a[pos] == 'G' and nad2_seq_c[pos] == 'T':
                    nad2_seq_c_CtoA_GtoT += 1
            elif nad2_seq_a[pos] == 'G' and nad2_seq_c[pos] == 'A' or nad2_seq_a[pos] == 'C' and nad2_seq_c[pos] == 'T':
                    nad2_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD2')
    print('Sequence B A:T-->T:A:', nad2_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad2_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad2_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad2_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad2_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad2_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad2_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad2_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad2_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad2_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad2_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad2_seq_c_GtoA_CtoT)
    
sequence_compare (nad2_seq_a, nad2_seq_b, nad2_seq_c)

#######NAD3#######
def sequence_compare(nad3_seq_a, nad3_seq_b, nad3_seq_c):  
    nad3_len1= len(nad3_seq_a)
    nad3_len2= len(nad3_seq_b)
    nad3_len3= len(nad3_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad3_seq_b_AtoT_TtoA = 0
    nad3_seq_b_AtoC_TtoG = 0
    nad3_seq_b_TtoC_AtoG = 0
    nad3_seq_b_CtoG_GtoC = 0
    nad3_seq_b_CtoA_GtoT = 0
    nad3_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad3_seq_c_AtoT_TtoA = 0
    nad3_seq_c_AtoC_TtoG = 0
    nad3_seq_c_TtoC_AtoG = 0
    nad3_seq_c_CtoG_GtoC = 0
    nad3_seq_c_CtoA_GtoT = 0
    nad3_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad3_len1,nad3_len2,nad3_len3)): 
        if nad3_seq_a[pos] != nad3_seq_b[pos] and nad3_seq_a[pos] == nad3_seq_c[pos] and nad3_seq_a[pos] != "-" and nad3_seq_b[pos] != "-" and nad3_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad3_seq_a[pos] == 'A' and nad3_seq_b[pos] == 'T' or nad3_seq_a[pos] == 'T' and nad3_seq_b[pos] == 'A':
                    nad3_seq_b_AtoT_TtoA += 1
            if nad3_seq_a[pos] == 'A' and nad3_seq_b[pos] == 'C' or nad3_seq_a[pos] == 'T' and nad3_seq_b[pos] == 'G':
                    nad3_seq_b_AtoC_TtoG += 1
            if nad3_seq_a[pos] == 'T' and nad3_seq_b[pos] == 'C' or nad3_seq_a[pos] == 'A' and nad3_seq_b[pos] == 'G':
                    nad3_seq_b_TtoC_AtoG += 1
            if nad3_seq_a[pos] == 'C' and nad3_seq_b[pos] == 'G' or nad3_seq_a[pos] == 'G' and nad3_seq_b[pos] == 'C':
                    nad3_seq_b_CtoG_GtoC += 1
            if nad3_seq_a[pos] == 'C' and nad3_seq_b[pos] == 'A' or nad3_seq_a[pos] == 'G' and nad3_seq_b[pos] == 'T':
                    nad3_seq_b_CtoA_GtoT += 1
            elif nad3_seq_a[pos] == 'G' and nad3_seq_b[pos] == 'A' or nad3_seq_a[pos] == 'C' and nad3_seq_b[pos] == 'T':
                    nad3_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad3_len1,nad3_len2,nad3_len3)):  
        if nad3_seq_a[pos] != nad3_seq_c[pos] and nad3_seq_a[pos] == nad3_seq_b[pos] and nad3_seq_a[pos] != "-" and nad3_seq_b[pos] != "-" and nad3_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad3_seq_a[pos] == 'A' and nad3_seq_c[pos] == 'T' or nad3_seq_a[pos] == 'T' and nad3_seq_c[pos] == 'A':
                    nad3_seq_c_AtoT_TtoA += 1
            if nad3_seq_a[pos] == 'A' and nad3_seq_c[pos] == 'C' or nad3_seq_a[pos] == 'T' and nad3_seq_c[pos] == 'G':
                    nad3_seq_c_AtoC_TtoG += 1
            if nad3_seq_a[pos] == 'T' and nad3_seq_c[pos] == 'C' or nad3_seq_a[pos] == 'A' and nad3_seq_c[pos] == 'G':
                    nad3_seq_c_TtoC_AtoG += 1
            if nad3_seq_a[pos] == 'C' and nad3_seq_c[pos] == 'G' or nad3_seq_a[pos] == 'G' and nad3_seq_c[pos] == 'C':
                    nad3_seq_c_CtoG_GtoC += 1
            if nad3_seq_a[pos] == 'C' and nad3_seq_c[pos] == 'A' or nad3_seq_a[pos] == 'G' and nad3_seq_c[pos] == 'T':
                    nad3_seq_c_CtoA_GtoT += 1
            elif nad3_seq_a[pos] == 'G' and nad3_seq_c[pos] == 'A' or nad3_seq_a[pos] == 'C' and nad3_seq_c[pos] == 'T':
                    nad3_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD3')
    print('Sequence B A:T-->T:A:', nad3_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad3_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad3_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad3_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad3_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad3_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad3_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad3_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad3_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad3_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad3_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad3_seq_c_GtoA_CtoT)
    
sequence_compare (nad3_seq_a, nad3_seq_b, nad3_seq_c)

#######NAD4#######
def sequence_compare(nad4_seq_a, nad4_seq_b, nad4_seq_c):  
    nad4_len1= len(nad4_seq_a)
    nad4_len2= len(nad4_seq_b)
    nad4_len3= len(nad4_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad4_seq_b_AtoT_TtoA = 0
    nad4_seq_b_AtoC_TtoG = 0
    nad4_seq_b_TtoC_AtoG = 0
    nad4_seq_b_CtoG_GtoC = 0
    nad4_seq_b_CtoA_GtoT = 0
    nad4_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad4_seq_c_AtoT_TtoA = 0
    nad4_seq_c_AtoC_TtoG = 0
    nad4_seq_c_TtoC_AtoG = 0
    nad4_seq_c_CtoG_GtoC = 0
    nad4_seq_c_CtoA_GtoT = 0
    nad4_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad4_len1,nad4_len2,nad4_len3)): 
        if nad4_seq_a[pos] != nad4_seq_b[pos] and nad4_seq_a[pos] == nad4_seq_c[pos] and nad4_seq_a[pos] != "-" and nad4_seq_b[pos] != "-" and nad4_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad4_seq_a[pos] == 'A' and nad4_seq_b[pos] == 'T' or nad4_seq_a[pos] == 'T' and nad4_seq_b[pos] == 'A':
                    nad4_seq_b_AtoT_TtoA += 1
            if nad4_seq_a[pos] == 'A' and nad4_seq_b[pos] == 'C' or nad4_seq_a[pos] == 'T' and nad4_seq_b[pos] == 'G':
                    nad4_seq_b_AtoC_TtoG += 1
            if nad4_seq_a[pos] == 'T' and nad4_seq_b[pos] == 'C' or nad4_seq_a[pos] == 'A' and nad4_seq_b[pos] == 'G':
                    nad4_seq_b_TtoC_AtoG += 1
            if nad4_seq_a[pos] == 'C' and nad4_seq_b[pos] == 'G' or nad4_seq_a[pos] == 'G' and nad4_seq_b[pos] == 'C':
                    nad4_seq_b_CtoG_GtoC += 1
            if nad4_seq_a[pos] == 'C' and nad4_seq_b[pos] == 'A' or nad4_seq_a[pos] == 'G' and nad4_seq_b[pos] == 'T':
                    nad4_seq_b_CtoA_GtoT += 1
            elif nad4_seq_a[pos] == 'G' and nad4_seq_b[pos] == 'A' or nad4_seq_a[pos] == 'C' and nad4_seq_b[pos] == 'T':
                    nad4_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad4_len1,nad4_len2,nad4_len3)):  
        if nad4_seq_a[pos] != nad4_seq_c[pos] and nad4_seq_a[pos] == nad4_seq_b[pos] and nad4_seq_a[pos] != "-" and nad4_seq_b[pos] != "-" and nad4_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad4_seq_a[pos] == 'A' and nad4_seq_c[pos] == 'T' or nad4_seq_a[pos] == 'T' and nad4_seq_c[pos] == 'A':
                    nad4_seq_c_AtoT_TtoA += 1
            if nad4_seq_a[pos] == 'A' and nad4_seq_c[pos] == 'C' or nad4_seq_a[pos] == 'T' and nad4_seq_c[pos] == 'G':
                    nad4_seq_c_AtoC_TtoG += 1
            if nad4_seq_a[pos] == 'T' and nad4_seq_c[pos] == 'C' or nad4_seq_a[pos] == 'A' and nad4_seq_c[pos] == 'G':
                    nad4_seq_c_TtoC_AtoG += 1
            if nad4_seq_a[pos] == 'C' and nad4_seq_c[pos] == 'G' or nad4_seq_a[pos] == 'G' and nad4_seq_c[pos] == 'C':
                    nad4_seq_c_CtoG_GtoC += 1
            if nad4_seq_a[pos] == 'C' and nad4_seq_c[pos] == 'A' or nad4_seq_a[pos] == 'G' and nad4_seq_c[pos] == 'T':
                    nad4_seq_c_CtoA_GtoT += 1
            elif nad4_seq_a[pos] == 'G' and nad4_seq_c[pos] == 'A' or nad4_seq_a[pos] == 'C' and nad4_seq_c[pos] == 'T':
                    nad4_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD4')
    print('Sequence B A:T-->T:A:', nad4_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad4_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad4_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad4_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad4_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad4_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad4_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad4_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad4_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad4_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad4_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad4_seq_c_GtoA_CtoT)
    
sequence_compare (nad4_seq_a, nad4_seq_b, nad4_seq_c)

#######NAD4L#######
def sequence_compare(nad4l_seq_a, nad4l_seq_b, nad4l_seq_c):  
    nad4l_len1= len(nad4l_seq_a)
    nad4l_len2= len(nad4l_seq_b)
    nad4l_len3= len(nad4l_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad4l_seq_b_AtoT_TtoA = 0
    nad4l_seq_b_AtoC_TtoG = 0
    nad4l_seq_b_TtoC_AtoG = 0
    nad4l_seq_b_CtoG_GtoC = 0
    nad4l_seq_b_CtoA_GtoT = 0
    nad4l_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad4l_seq_c_AtoT_TtoA = 0
    nad4l_seq_c_AtoC_TtoG = 0
    nad4l_seq_c_TtoC_AtoG = 0
    nad4l_seq_c_CtoG_GtoC = 0
    nad4l_seq_c_CtoA_GtoT = 0
    nad4l_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad4l_len1,nad4l_len2,nad4l_len3)): 
        if nad4l_seq_a[pos] != nad4l_seq_b[pos] and nad4l_seq_a[pos] == nad4l_seq_c[pos] and nad4l_seq_a[pos] != "-" and nad4l_seq_b[pos] != "-" and nad4l_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad4l_seq_a[pos] == 'A' and nad4l_seq_b[pos] == 'T' or nad4l_seq_a[pos] == 'T' and nad4l_seq_b[pos] == 'A':
                    nad4l_seq_b_AtoT_TtoA += 1
            if nad4l_seq_a[pos] == 'A' and nad4l_seq_b[pos] == 'C' or nad4l_seq_a[pos] == 'T' and nad4l_seq_b[pos] == 'G':
                    nad4l_seq_b_AtoC_TtoG += 1
            if nad4l_seq_a[pos] == 'T' and nad4l_seq_b[pos] == 'C' or nad4l_seq_a[pos] == 'A' and nad4l_seq_b[pos] == 'G':
                    nad4l_seq_b_TtoC_AtoG += 1
            if nad4l_seq_a[pos] == 'C' and nad4l_seq_b[pos] == 'G' or nad4l_seq_a[pos] == 'G' and nad4l_seq_b[pos] == 'C':
                    nad4l_seq_b_CtoG_GtoC += 1
            if nad4l_seq_a[pos] == 'C' and nad4l_seq_b[pos] == 'A' or nad4l_seq_a[pos] == 'G' and nad4l_seq_b[pos] == 'T':
                    nad4l_seq_b_CtoA_GtoT += 1
            elif nad4l_seq_a[pos] == 'G' and nad4l_seq_b[pos] == 'A' or nad4l_seq_a[pos] == 'C' and nad4l_seq_b[pos] == 'T':
                    nad4l_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad4l_len1,nad4l_len2,nad4l_len3)):  
        if nad4l_seq_a[pos] != nad4l_seq_c[pos] and nad4l_seq_a[pos] == nad4l_seq_b[pos] and nad4l_seq_a[pos] != "-" and nad4l_seq_b[pos] != "-" and nad4l_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad4l_seq_a[pos] == 'A' and nad4l_seq_c[pos] == 'T' or nad4l_seq_a[pos] == 'T' and nad4l_seq_c[pos] == 'A':
                    nad4l_seq_c_AtoT_TtoA += 1
            if nad4l_seq_a[pos] == 'A' and nad4l_seq_c[pos] == 'C' or nad4l_seq_a[pos] == 'T' and nad4l_seq_c[pos] == 'G':
                    nad4l_seq_c_AtoC_TtoG += 1
            if nad4l_seq_a[pos] == 'T' and nad4l_seq_c[pos] == 'C' or nad4l_seq_a[pos] == 'A' and nad4l_seq_c[pos] == 'G':
                    nad4l_seq_c_TtoC_AtoG += 1
            if nad4l_seq_a[pos] == 'C' and nad4l_seq_c[pos] == 'G' or nad4l_seq_a[pos] == 'G' and nad4l_seq_c[pos] == 'C':
                    nad4l_seq_c_CtoG_GtoC += 1
            if nad4l_seq_a[pos] == 'C' and nad4l_seq_c[pos] == 'A' or nad4l_seq_a[pos] == 'G' and nad4l_seq_c[pos] == 'T':
                    nad4l_seq_c_CtoA_GtoT += 1
            elif nad4l_seq_a[pos] == 'G' and nad4l_seq_c[pos] == 'A' or nad4l_seq_a[pos] == 'C' and nad4l_seq_c[pos] == 'T':
                    nad4l_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD4L')
    print('Sequence B A:T-->T:A:', nad4l_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad4l_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad4l_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad4l_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad4l_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad4l_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad4l_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad4l_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad4l_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad4l_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad4l_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad4l_seq_c_GtoA_CtoT)
    
sequence_compare (nad4l_seq_a, nad4l_seq_b, nad4l_seq_c)

#######NAD5#######
def sequence_compare(nad5_seq_a, nad5_seq_b, nad5_seq_c):  
    nad5_len1= len(nad5_seq_a)
    nad5_len2= len(nad5_seq_b)
    nad5_len3= len(nad5_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad5_seq_b_AtoT_TtoA = 0
    nad5_seq_b_AtoC_TtoG = 0
    nad5_seq_b_TtoC_AtoG = 0
    nad5_seq_b_CtoG_GtoC = 0
    nad5_seq_b_CtoA_GtoT = 0
    nad5_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad5_seq_c_AtoT_TtoA = 0
    nad5_seq_c_AtoC_TtoG = 0
    nad5_seq_c_TtoC_AtoG = 0
    nad5_seq_c_CtoG_GtoC = 0
    nad5_seq_c_CtoA_GtoT = 0
    nad5_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad5_len1,nad5_len2,nad5_len3)): 
        if nad5_seq_a[pos] != nad5_seq_b[pos] and nad5_seq_a[pos] == nad5_seq_c[pos] and nad5_seq_a[pos] != "-" and nad5_seq_b[pos] != "-" and nad5_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad5_seq_a[pos] == 'A' and nad5_seq_b[pos] == 'T' or nad5_seq_a[pos] == 'T' and nad5_seq_b[pos] == 'A':
                    nad5_seq_b_AtoT_TtoA += 1
            if nad5_seq_a[pos] == 'A' and nad5_seq_b[pos] == 'C' or nad5_seq_a[pos] == 'T' and nad5_seq_b[pos] == 'G':
                    nad5_seq_b_AtoC_TtoG += 1
            if nad5_seq_a[pos] == 'T' and nad5_seq_b[pos] == 'C' or nad5_seq_a[pos] == 'A' and nad5_seq_b[pos] == 'G':
                    nad5_seq_b_TtoC_AtoG += 1
            if nad5_seq_a[pos] == 'C' and nad5_seq_b[pos] == 'G' or nad5_seq_a[pos] == 'G' and nad5_seq_b[pos] == 'C':
                    nad5_seq_b_CtoG_GtoC += 1
            if nad5_seq_a[pos] == 'C' and nad5_seq_b[pos] == 'A' or nad5_seq_a[pos] == 'G' and nad5_seq_b[pos] == 'T':
                    nad5_seq_b_CtoA_GtoT += 1
            elif nad5_seq_a[pos] == 'G' and nad5_seq_b[pos] == 'A' or nad5_seq_a[pos] == 'C' and nad5_seq_b[pos] == 'T':
                    nad5_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad5_len1,nad5_len2,nad5_len3)):  
        if nad5_seq_a[pos] != nad5_seq_c[pos] and nad5_seq_a[pos] == nad5_seq_b[pos] and nad5_seq_a[pos] != "-" and nad5_seq_b[pos] != "-" and nad5_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad5_seq_a[pos] == 'A' and nad5_seq_c[pos] == 'T' or nad5_seq_a[pos] == 'T' and nad5_seq_c[pos] == 'A':
                    nad5_seq_c_AtoT_TtoA += 1
            if nad5_seq_a[pos] == 'A' and nad5_seq_c[pos] == 'C' or nad5_seq_a[pos] == 'T' and nad5_seq_c[pos] == 'G':
                    nad5_seq_c_AtoC_TtoG += 1
            if nad5_seq_a[pos] == 'T' and nad5_seq_c[pos] == 'C' or nad5_seq_a[pos] == 'A' and nad5_seq_c[pos] == 'G':
                    nad5_seq_c_TtoC_AtoG += 1
            if nad5_seq_a[pos] == 'C' and nad5_seq_c[pos] == 'G' or nad5_seq_a[pos] == 'G' and nad5_seq_c[pos] == 'C':
                    nad5_seq_c_CtoG_GtoC += 1
            if nad5_seq_a[pos] == 'C' and nad5_seq_c[pos] == 'A' or nad5_seq_a[pos] == 'G' and nad5_seq_c[pos] == 'T':
                    nad5_seq_c_CtoA_GtoT += 1
            elif nad5_seq_a[pos] == 'G' and nad5_seq_c[pos] == 'A' or nad5_seq_a[pos] == 'C' and nad5_seq_c[pos] == 'T':
                    nad5_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD5')
    print('Sequence B A:T-->T:A:', nad5_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad5_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad5_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad5_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad5_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad5_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad5_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad5_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad5_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad5_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad5_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad5_seq_c_GtoA_CtoT)
    
sequence_compare (nad5_seq_a, nad5_seq_b, nad5_seq_c)

#######NAD6#######
def sequence_compare(nad6_seq_a, nad6_seq_b, nad6_seq_c):  
    nad6_len1= len(nad6_seq_a)
    nad6_len2= len(nad6_seq_b)
    nad6_len3= len(nad6_seq_c)
    mismatches = []
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence b
    nad6_seq_b_AtoT_TtoA = 0
    nad6_seq_b_AtoC_TtoG = 0
    nad6_seq_b_TtoC_AtoG = 0
    nad6_seq_b_CtoG_GtoC = 0
    nad6_seq_b_CtoA_GtoT = 0
    nad6_seq_b_GtoA_CtoT = 0
    
    # make count variables for keeping track of the substitutions in sequence a when compared to sequence c
    nad6_seq_c_AtoT_TtoA = 0
    nad6_seq_c_AtoC_TtoG = 0
    nad6_seq_c_TtoC_AtoG = 0
    nad6_seq_c_CtoG_GtoC = 0
    nad6_seq_c_CtoA_GtoT = 0
    nad6_seq_c_GtoA_CtoT = 0 
    
    # this one is looking at seq_a vs seq_b
    for pos in range (0,min(nad6_len1,nad6_len2,nad6_len3)): 
        if nad6_seq_a[pos] != nad6_seq_b[pos] and nad6_seq_a[pos] == nad6_seq_c[pos] and nad6_seq_a[pos] != "-" and nad6_seq_b[pos] != "-" and nad6_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad6_seq_a[pos] == 'A' and nad6_seq_b[pos] == 'T' or nad6_seq_a[pos] == 'T' and nad6_seq_b[pos] == 'A':
                    nad6_seq_b_AtoT_TtoA += 1
            if nad6_seq_a[pos] == 'A' and nad6_seq_b[pos] == 'C' or nad6_seq_a[pos] == 'T' and nad6_seq_b[pos] == 'G':
                    nad6_seq_b_AtoC_TtoG += 1
            if nad6_seq_a[pos] == 'T' and nad6_seq_b[pos] == 'C' or nad6_seq_a[pos] == 'A' and nad6_seq_b[pos] == 'G':
                    nad6_seq_b_TtoC_AtoG += 1
            if nad6_seq_a[pos] == 'C' and nad6_seq_b[pos] == 'G' or nad6_seq_a[pos] == 'G' and nad6_seq_b[pos] == 'C':
                    nad6_seq_b_CtoG_GtoC += 1
            if nad6_seq_a[pos] == 'C' and nad6_seq_b[pos] == 'A' or nad6_seq_a[pos] == 'G' and nad6_seq_b[pos] == 'T':
                    nad6_seq_b_CtoA_GtoT += 1
            elif nad6_seq_a[pos] == 'G' and nad6_seq_b[pos] == 'A' or nad6_seq_a[pos] == 'C' and nad6_seq_b[pos] == 'T':
                    nad6_seq_b_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    

    # This one is looking at changes in seq_a vs seq_c        
    for pos in range (0,min(nad6_len1,nad6_len2,nad6_len3)):  
        if nad6_seq_a[pos] != nad6_seq_c[pos] and nad6_seq_a[pos] == nad6_seq_b[pos] and nad6_seq_a[pos] != "-" and nad6_seq_b[pos] != "-" and nad6_seq_c[pos] != "-" :
            mismatches.append('|')
            if nad6_seq_a[pos] == 'A' and nad6_seq_c[pos] == 'T' or nad6_seq_a[pos] == 'T' and nad6_seq_c[pos] == 'A':
                    nad6_seq_c_AtoT_TtoA += 1
            if nad6_seq_a[pos] == 'A' and nad6_seq_c[pos] == 'C' or nad6_seq_a[pos] == 'T' and nad6_seq_c[pos] == 'G':
                    nad6_seq_c_AtoC_TtoG += 1
            if nad6_seq_a[pos] == 'T' and nad6_seq_c[pos] == 'C' or nad6_seq_a[pos] == 'A' and nad6_seq_c[pos] == 'G':
                    nad6_seq_c_TtoC_AtoG += 1
            if nad6_seq_a[pos] == 'C' and nad6_seq_c[pos] == 'G' or nad6_seq_a[pos] == 'G' and nad6_seq_c[pos] == 'C':
                    nad6_seq_c_CtoG_GtoC += 1
            if nad6_seq_a[pos] == 'C' and nad6_seq_c[pos] == 'A' or nad6_seq_a[pos] == 'G' and nad6_seq_c[pos] == 'T':
                    nad6_seq_c_CtoA_GtoT += 1
            elif nad6_seq_a[pos] == 'G' and nad6_seq_c[pos] == 'A' or nad6_seq_a[pos] == 'C' and nad6_seq_c[pos] == 'T':
                    nad6_seq_c_GtoA_CtoT += 1
            #print (pos+1, seq_a[pos], seq_b[pos])
        else:
            mismatches.append('_')
    
    print('NAD6')
    print('Sequence B A:T-->T:A:', nad6_seq_b_AtoT_TtoA)
    print('Sequence B A:T-->C:G:', nad6_seq_b_AtoC_TtoG)
    print('Sequence B T:A-->C:G:', nad6_seq_b_TtoC_AtoG)
    print('Sequence B C:G-->G:C:', nad6_seq_b_CtoG_GtoC)
    print('Sequence B C:G-->A:T:', nad6_seq_b_CtoA_GtoT)
    print('Sequence B G:C-->A:T:', nad6_seq_b_GtoA_CtoT)

    print('Sequence C A:T-->T:A:', nad6_seq_c_AtoT_TtoA)
    print('Sequence C A:T-->C:G:', nad6_seq_c_AtoC_TtoG)
    print('Sequence C T:A-->C:G:', nad6_seq_c_TtoC_AtoG)
    print('Sequence C C:G-->G:C:', nad6_seq_c_CtoG_GtoC)
    print('Sequence C C:G-->A:T:', nad6_seq_c_CtoA_GtoT)
    print('Sequence C G:C-->A:T:', nad6_seq_c_GtoA_CtoT)
    
sequence_compare (nad6_seq_a, nad6_seq_b, nad6_seq_c)
